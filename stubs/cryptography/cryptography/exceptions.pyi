from enum import Enum
from typing import Any, Optional

class _Reasons(Enum):
    BACKEND_MISSING_INTERFACE: int = ...
    UNSUPPORTED_HASH: int = ...
    UNSUPPORTED_CIPHER: int = ...
    UNSUPPORTED_PADDING: int = ...
    UNSUPPORTED_MGF: int = ...
    UNSUPPORTED_PUBLIC_KEY_ALGORITHM: int = ...
    UNSUPPORTED_ELLIPTIC_CURVE: int = ...
    UNSUPPORTED_SERIALIZATION: int = ...
    UNSUPPORTED_X509: int = ...
    UNSUPPORTED_EXCHANGE_ALGORITHM: int = ...
    UNSUPPORTED_DIFFIE_HELLMAN: int = ...
    UNSUPPORTED_MAC: int = ...

class UnsupportedAlgorithm(Exception):
    _reason: Any = ...
    def __init__(self, message: Any, reason: Optional[Any] = ...) -> None: ...

class AlreadyFinalized(Exception): ...
class AlreadyUpdated(Exception): ...
class NotYetFinalized(Exception): ...
class InvalidTag(Exception): ...
class InvalidSignature(Exception): ...

class InternalError(Exception):
    err_code: Any = ...
    def __init__(self, msg: Any, err_code: Any) -> None: ...

class InvalidKey(Exception): ...
