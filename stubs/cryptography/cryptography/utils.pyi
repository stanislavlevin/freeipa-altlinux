import typing
from typing import Any

class CryptographyDeprecationWarning(UserWarning): ...
PersistentlyDeprecated2017 = CryptographyDeprecationWarning
PersistentlyDeprecated2019 = CryptographyDeprecationWarning
DeprecatedIn34 = CryptographyDeprecationWarning

def _check_bytes(name: str, value: bytes) -> Any: ...
def _check_byteslike(name: str, value: bytes) -> Any: ...
def read_only_property(name: str) -> Any: ...
def register_interface(iface: Any): ...
def register_interface_if(predicate: Any, iface: Any): ...
def int_to_bytes(integer: int, length: typing.Optional[int]=...) -> bytes: ...

class InterfaceNotImplemented(Exception): ...

def strip_annotation(signature: Any): ...
def verify_interface(iface: Any, klass: Any, *, check_annotations: bool = ...) -> None: ...

class _DeprecatedValue:
    value: Any = ...
    message: Any = ...
    warning_class: Any = ...
    def __init__(self, value: Any, message: Any, warning_class: Any) -> None: ...

class _ModuleWithDeprecations:
    def __init__(self, module: Any) -> None: ...
    def __getattr__(self, attr: Any): ...
    def __setattr__(self, attr: Any, value: Any) -> None: ...
    def __delattr__(self, attr: Any) -> None: ...
    def __dir__(self): ...

def deprecated(value: Any, module_name: Any, message: Any, warning_class: Any): ...
def cached_property(func: Any): ...

int_from_bytes: Any
