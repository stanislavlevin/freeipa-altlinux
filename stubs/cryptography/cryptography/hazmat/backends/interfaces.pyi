import abc
from typing import Any, Optional

class CipherBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def cipher_supported(self, cipher: Any, mode: Any) -> Any: ...
    @abc.abstractmethod
    def create_symmetric_encryption_ctx(self, cipher: Any, mode: Any) -> Any: ...
    @abc.abstractmethod
    def create_symmetric_decryption_ctx(self, cipher: Any, mode: Any) -> Any: ...

class HashBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def hash_supported(self, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def create_hash_ctx(self, algorithm: Any) -> Any: ...

class HMACBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def hmac_supported(self, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def create_hmac_ctx(self, key: Any, algorithm: Any) -> Any: ...

class CMACBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def cmac_algorithm_supported(self, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def create_cmac_ctx(self, algorithm: Any) -> Any: ...

class PBKDF2HMACBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def pbkdf2_hmac_supported(self, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def derive_pbkdf2_hmac(self, algorithm: Any, length: Any, salt: Any, iterations: Any, key_material: Any) -> Any: ...

class RSABackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def generate_rsa_private_key(self, public_exponent: Any, key_size: Any) -> Any: ...
    @abc.abstractmethod
    def rsa_padding_supported(self, padding: Any) -> Any: ...
    @abc.abstractmethod
    def generate_rsa_parameters_supported(self, public_exponent: Any, key_size: Any) -> Any: ...
    @abc.abstractmethod
    def load_rsa_private_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def load_rsa_public_numbers(self, numbers: Any) -> Any: ...

class DSABackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def generate_dsa_parameters(self, key_size: Any) -> Any: ...
    @abc.abstractmethod
    def generate_dsa_private_key(self, parameters: Any) -> Any: ...
    @abc.abstractmethod
    def generate_dsa_private_key_and_parameters(self, key_size: Any) -> Any: ...
    @abc.abstractmethod
    def dsa_hash_supported(self, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def dsa_parameters_supported(self, p: Any, q: Any, g: Any) -> Any: ...
    @abc.abstractmethod
    def load_dsa_private_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def load_dsa_public_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def load_dsa_parameter_numbers(self, numbers: Any) -> Any: ...

class EllipticCurveBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def elliptic_curve_signature_algorithm_supported(self, signature_algorithm: Any, curve: Any) -> Any: ...
    @abc.abstractmethod
    def elliptic_curve_supported(self, curve: Any) -> Any: ...
    @abc.abstractmethod
    def generate_elliptic_curve_private_key(self, curve: Any) -> Any: ...
    @abc.abstractmethod
    def load_elliptic_curve_public_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def load_elliptic_curve_private_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def elliptic_curve_exchange_algorithm_supported(self, algorithm: Any, curve: Any) -> Any: ...
    @abc.abstractmethod
    def derive_elliptic_curve_private_key(self, private_value: Any, curve: Any) -> Any: ...

class PEMSerializationBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def load_pem_private_key(self, data: Any, password: Any) -> Any: ...
    @abc.abstractmethod
    def load_pem_public_key(self, data: Any) -> Any: ...
    @abc.abstractmethod
    def load_pem_parameters(self, data: Any) -> Any: ...

class DERSerializationBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def load_der_private_key(self, data: Any, password: Any) -> Any: ...
    @abc.abstractmethod
    def load_der_public_key(self, data: Any) -> Any: ...
    @abc.abstractmethod
    def load_der_parameters(self, data: Any) -> Any: ...

class X509Backend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def load_pem_x509_certificate(self, data: Any) -> Any: ...
    @abc.abstractmethod
    def load_der_x509_certificate(self, data: Any) -> Any: ...
    @abc.abstractmethod
    def load_der_x509_csr(self, data: Any) -> Any: ...
    @abc.abstractmethod
    def load_pem_x509_csr(self, data: Any) -> Any: ...
    @abc.abstractmethod
    def create_x509_csr(self, builder: Any, private_key: Any, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def create_x509_certificate(self, builder: Any, private_key: Any, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def create_x509_crl(self, builder: Any, private_key: Any, algorithm: Any) -> Any: ...
    @abc.abstractmethod
    def create_x509_revoked_certificate(self, builder: Any) -> Any: ...
    @abc.abstractmethod
    def x509_name_bytes(self, name: Any) -> Any: ...

class DHBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def generate_dh_parameters(self, generator: Any, key_size: Any) -> Any: ...
    @abc.abstractmethod
    def generate_dh_private_key(self, parameters: Any) -> Any: ...
    @abc.abstractmethod
    def generate_dh_private_key_and_parameters(self, generator: Any, key_size: Any) -> Any: ...
    @abc.abstractmethod
    def load_dh_private_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def load_dh_public_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def load_dh_parameter_numbers(self, numbers: Any) -> Any: ...
    @abc.abstractmethod
    def dh_parameters_supported(self, p: Any, g: Any, q: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def dh_x942_serialization_supported(self) -> Any: ...

class ScryptBackend(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def derive_scrypt(self, key_material: Any, salt: Any, length: Any, n: Any, r: Any, p: Any) -> Any: ...
