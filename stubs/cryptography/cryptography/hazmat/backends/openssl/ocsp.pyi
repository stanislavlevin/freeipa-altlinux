import datetime
import typing
from cryptography import utils as utils, x509 as x509
from cryptography.exceptions import UnsupportedAlgorithm as UnsupportedAlgorithm
from cryptography.hazmat.backends.openssl.decode_asn1 import _CRL_ENTRY_REASON_CODE_TO_ENUM as _CRL_ENTRY_REASON_CODE_TO_ENUM, _asn1_integer_to_int as _asn1_integer_to_int, _asn1_string_to_bytes as _asn1_string_to_bytes, _decode_x509_name as _decode_x509_name, _obj2txt as _obj2txt, _parse_asn1_generalized_time as _parse_asn1_generalized_time
from cryptography.hazmat.backends.openssl.x509 import _Certificate as _Certificate
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.x509.ocsp import OCSPCertStatus as OCSPCertStatus, OCSPRequest as OCSPRequest, OCSPResponse as OCSPResponse, OCSPResponseStatus as OCSPResponseStatus, _CERT_STATUS_TO_ENUM as _CERT_STATUS_TO_ENUM, _OIDS_TO_HASH as _OIDS_TO_HASH, _RESPONSE_STATUS_TO_ENUM as _RESPONSE_STATUS_TO_ENUM
from typing import Any

def _issuer_key_hash(backend: Any, cert_id: Any): ...
def _issuer_name_hash(backend: Any, cert_id: Any): ...
def _serial_number(backend: Any, cert_id: Any): ...
def _hash_algorithm(backend: Any, cert_id: Any): ...

class _OCSPResponse(OCSPResponse):
    _backend: Any = ...
    _ocsp_response: Any = ...
    _status: Any = ...
    _basic: Any = ...
    _single: Any = ...
    _cert_id: Any = ...
    def __init__(self, backend: Any, ocsp_response: Any) -> None: ...
    response_status: Any = ...
    def _requires_successful_response(self) -> None: ...
    @property
    def signature_algorithm_oid(self) -> x509.ObjectIdentifier: ...
    @property
    def signature_hash_algorithm(self) -> typing.Optional[hashes.HashAlgorithm]: ...
    @property
    def signature(self) -> bytes: ...
    @property
    def tbs_response_bytes(self) -> bytes: ...
    @property
    def certificates(self) -> typing.List[x509.Certificate]: ...
    @property
    def responder_key_hash(self) -> typing.Optional[bytes]: ...
    @property
    def responder_name(self) -> typing.Optional[x509.Name]: ...
    def _responder_key_name(self): ...
    @property
    def produced_at(self) -> datetime.datetime: ...
    @property
    def certificate_status(self) -> OCSPCertStatus: ...
    @property
    def revocation_time(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def revocation_reason(self) -> typing.Optional[x509.ReasonFlags]: ...
    @property
    def this_update(self) -> datetime.datetime: ...
    @property
    def next_update(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def issuer_key_hash(self) -> bytes: ...
    @property
    def issuer_name_hash(self) -> bytes: ...
    @property
    def hash_algorithm(self) -> hashes.HashAlgorithm: ...
    @property
    def serial_number(self) -> int: ...
    def extensions(self) -> x509.Extensions: ...
    def single_extensions(self) -> x509.Extensions: ...
    def public_bytes(self, encoding: serialization.Encoding) -> bytes: ...

class _OCSPRequest(OCSPRequest):
    _backend: Any = ...
    _ocsp_request: Any = ...
    _request: Any = ...
    _cert_id: Any = ...
    def __init__(self, backend: Any, ocsp_request: Any) -> None: ...
    @property
    def issuer_key_hash(self) -> bytes: ...
    @property
    def issuer_name_hash(self) -> bytes: ...
    @property
    def serial_number(self) -> int: ...
    @property
    def hash_algorithm(self) -> hashes.HashAlgorithm: ...
    def extensions(self) -> x509.Extensions: ...
    def public_bytes(self, encoding: serialization.Encoding) -> bytes: ...
