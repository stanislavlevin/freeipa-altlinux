import typing
from cryptography import utils as utils
from cryptography.exceptions import InvalidSignature as InvalidSignature, UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat.backends.openssl.utils import _calculate_digest_and_algorithm as _calculate_digest_and_algorithm, _check_not_prehashed as _check_not_prehashed, _warn_sign_verify_deprecated as _warn_sign_verify_deprecated
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.hazmat.primitives.asymmetric import AsymmetricSignatureContext as AsymmetricSignatureContext, AsymmetricVerificationContext as AsymmetricVerificationContext, utils as asym_utils
from cryptography.hazmat.primitives.asymmetric.padding import AsymmetricPadding as AsymmetricPadding, MGF1 as MGF1, OAEP as OAEP, PKCS1v15 as PKCS1v15, PSS as PSS, calculate_max_pss_salt_length as calculate_max_pss_salt_length
from cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey as RSAPrivateKey, RSAPrivateNumbers as RSAPrivateNumbers, RSAPublicKey as RSAPublicKey, RSAPublicNumbers as RSAPublicNumbers
from typing import Any

def _get_rsa_pss_salt_length(pss: PSS, key: typing.Union[RSAPrivateKey, RSAPublicKey], hash_algorithm: hashes.HashAlgorithm) -> int: ...
def _enc_dec_rsa(backend: Any, key: typing.Union[_RSAPrivateKey, _RSAPublicKey], data: bytes, padding: AsymmetricPadding) -> bytes: ...
def _enc_dec_rsa_pkey_ctx(backend: Any, key: typing.Union[_RSAPrivateKey, _RSAPublicKey], data: bytes, padding_enum: int, padding: AsymmetricPadding) -> bytes: ...
def _rsa_sig_determine_padding(backend: Any, key: Any, padding: Any, algorithm: Any): ...
def _rsa_sig_setup(backend: Any, padding: Any, algorithm: Any, key: Any, init_func: Any): ...
def _rsa_sig_sign(backend: Any, padding: Any, algorithm: Any, private_key: Any, data: Any): ...
def _rsa_sig_verify(backend: Any, padding: Any, algorithm: Any, public_key: Any, signature: Any, data: Any) -> None: ...
def _rsa_sig_recover(backend: Any, padding: Any, algorithm: Any, public_key: Any, signature: Any): ...

class _RSASignatureContext(AsymmetricSignatureContext):
    _backend: Any = ...
    _private_key: Any = ...
    _padding: Any = ...
    _algorithm: Any = ...
    _hash_ctx: Any = ...
    def __init__(self, backend: Any, private_key: RSAPrivateKey, padding: AsymmetricPadding, algorithm: hashes.HashAlgorithm) -> None: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...

class _RSAVerificationContext(AsymmetricVerificationContext):
    _backend: Any = ...
    _public_key: Any = ...
    _signature: Any = ...
    _padding: Any = ...
    _algorithm: Any = ...
    _hash_ctx: Any = ...
    def __init__(self, backend: Any, public_key: RSAPublicKey, signature: bytes, padding: AsymmetricPadding, algorithm: hashes.HashAlgorithm) -> None: ...
    def update(self, data: bytes) -> None: ...
    def verify(self) -> None: ...

class _RSAPrivateKey(RSAPrivateKey):
    _backend: Any = ...
    _rsa_cdata: Any = ...
    _evp_pkey: Any = ...
    _key_size: Any = ...
    def __init__(self, backend: Any, rsa_cdata: Any, evp_pkey: Any) -> None: ...
    key_size: Any = ...
    def signer(self, padding: AsymmetricPadding, algorithm: hashes.HashAlgorithm) -> AsymmetricSignatureContext: ...
    def decrypt(self, ciphertext: bytes, padding: AsymmetricPadding) -> bytes: ...
    def public_key(self) -> RSAPublicKey: ...
    def private_numbers(self) -> RSAPrivateNumbers: ...
    def private_bytes(self, encoding: serialization.Encoding, format: serialization.PrivateFormat, encryption_algorithm: serialization.KeySerializationEncryption) -> bytes: ...
    def sign(self, data: bytes, padding: AsymmetricPadding, algorithm: typing.Union[asym_utils.Prehashed, hashes.HashAlgorithm]) -> bytes: ...

class _RSAPublicKey(RSAPublicKey):
    _backend: Any = ...
    _rsa_cdata: Any = ...
    _evp_pkey: Any = ...
    _key_size: Any = ...
    def __init__(self, backend: Any, rsa_cdata: Any, evp_pkey: Any) -> None: ...
    key_size: Any = ...
    def verifier(self, signature: bytes, padding: AsymmetricPadding, algorithm: hashes.HashAlgorithm) -> AsymmetricVerificationContext: ...
    def encrypt(self, plaintext: bytes, padding: AsymmetricPadding) -> bytes: ...
    def public_numbers(self) -> RSAPublicNumbers: ...
    def public_bytes(self, encoding: serialization.Encoding, format: serialization.PublicFormat) -> bytes: ...
    def verify(self, signature: bytes, data: bytes, padding: AsymmetricPadding, algorithm: typing.Union[asym_utils.Prehashed, hashes.HashAlgorithm]) -> None: ...
    def recover_data_from_signature(self, signature: bytes, padding: AsymmetricPadding, algorithm: typing.Optional[hashes.HashAlgorithm]) -> bytes: ...
