from cryptography import exceptions as exceptions
from cryptography.hazmat.primitives import serialization as serialization
from cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey as Ed25519PrivateKey, Ed25519PublicKey as Ed25519PublicKey, _ED25519_KEY_SIZE as _ED25519_KEY_SIZE, _ED25519_SIG_SIZE as _ED25519_SIG_SIZE
from typing import Any

class _Ed25519PublicKey(Ed25519PublicKey):
    _backend: Any = ...
    _evp_pkey: Any = ...
    def __init__(self, backend: Any, evp_pkey: Any) -> None: ...
    def public_bytes(self, encoding: serialization.Encoding, format: serialization.PublicFormat) -> bytes: ...
    def _raw_public_bytes(self) -> bytes: ...
    def verify(self, signature: bytes, data: bytes) -> None: ...

class _Ed25519PrivateKey(Ed25519PrivateKey):
    _backend: Any = ...
    _evp_pkey: Any = ...
    def __init__(self, backend: Any, evp_pkey: Any) -> None: ...
    def public_key(self) -> Ed25519PublicKey: ...
    def sign(self, data: bytes) -> bytes: ...
    def private_bytes(self, encoding: serialization.Encoding, format: serialization.PrivateFormat, encryption_algorithm: serialization.KeySerializationEncryption) -> bytes: ...
    def _raw_private_bytes(self) -> bytes: ...
