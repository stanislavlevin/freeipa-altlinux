from cryptography import x509 as x509
from cryptography.hazmat._der import DERReader as DERReader, INTEGER as INTEGER, NULL as NULL, SEQUENCE as SEQUENCE
from cryptography.x509.extensions import _TLS_FEATURE_TYPE_TO_ENUM as _TLS_FEATURE_TYPE_TO_ENUM
from cryptography.x509.name import _ASN1_TYPE_TO_ENUM as _ASN1_TYPE_TO_ENUM
from cryptography.x509.oid import CRLEntryExtensionOID as CRLEntryExtensionOID, CertificatePoliciesOID as CertificatePoliciesOID, ExtensionOID as ExtensionOID, OCSPExtensionOID as OCSPExtensionOID
from typing import Any

def _obj2txt(backend: Any, obj: Any): ...
def _decode_x509_name_entry(backend: Any, x509_name_entry: Any): ...
def _decode_x509_name(backend: Any, x509_name: Any): ...
def _decode_general_names(backend: Any, gns: Any): ...
def _decode_general_name(backend: Any, gn: Any): ...
def _decode_ocsp_no_check(backend: Any, ext: Any): ...
def _decode_crl_number(backend: Any, ext: Any): ...
def _decode_delta_crl_indicator(backend: Any, ext: Any): ...

class _X509ExtensionParser:
    ext_count: Any = ...
    get_ext: Any = ...
    handlers: Any = ...
    _backend: Any = ...
    def __init__(self, backend: Any, ext_count: Any, get_ext: Any, handlers: Any) -> None: ...
    def parse(self, x509_obj: Any): ...

def _decode_certificate_policies(backend: Any, cp: Any): ...
def _decode_user_notice(backend: Any, un: Any): ...
def _decode_basic_constraints(backend: Any, bc_st: Any): ...
def _decode_subject_key_identifier(backend: Any, asn1_string: Any): ...
def _decode_authority_key_identifier(backend: Any, akid: Any): ...
def _decode_information_access(backend: Any, ia: Any): ...
def _decode_authority_information_access(backend: Any, aia: Any): ...
def _decode_subject_information_access(backend: Any, aia: Any): ...
def _decode_key_usage(backend: Any, bit_string: Any): ...
def _decode_general_names_extension(backend: Any, gns: Any): ...
def _decode_subject_alt_name(backend: Any, ext: Any): ...
def _decode_issuer_alt_name(backend: Any, ext: Any): ...
def _decode_name_constraints(backend: Any, nc: Any): ...
def _decode_general_subtrees(backend: Any, stack_subtrees: Any): ...
def _decode_issuing_dist_point(backend: Any, idp: Any): ...
def _decode_policy_constraints(backend: Any, pc: Any): ...
def _decode_extended_key_usage(backend: Any, sk: Any): ...

_DISTPOINT_TYPE_FULLNAME: int
_DISTPOINT_TYPE_RELATIVENAME: int

def _decode_dist_points(backend: Any, cdps: Any): ...

_REASON_BIT_MAPPING: Any

def _decode_reasons(backend: Any, reasons: Any): ...
def _decode_distpoint(backend: Any, distpoint: Any): ...
def _decode_crl_distribution_points(backend: Any, cdps: Any): ...
def _decode_freshest_crl(backend: Any, cdps: Any): ...
def _decode_inhibit_any_policy(backend: Any, asn1_int: Any): ...
def _decode_scts(backend: Any, asn1_scts: Any): ...
def _decode_precert_signed_certificate_timestamps(backend: Any, asn1_scts: Any): ...
def _decode_signed_certificate_timestamps(backend: Any, asn1_scts: Any): ...

_CRL_ENTRY_REASON_CODE_TO_ENUM: Any
_CRL_ENTRY_REASON_ENUM_TO_CODE: Any

def _decode_crl_reason(backend: Any, enum: Any): ...
def _decode_invalidity_date(backend: Any, inv_date: Any): ...
def _decode_cert_issuer(backend: Any, gns: Any): ...
def _asn1_to_der(backend: Any, asn1_type: Any): ...
def _asn1_integer_to_int(backend: Any, asn1_int: Any): ...
def _asn1_integer_to_int_or_none(backend: Any, asn1_int: Any): ...
def _asn1_string_to_bytes(backend: Any, asn1_string: Any): ...
def _asn1_string_to_ascii(backend: Any, asn1_string: Any): ...
def _asn1_string_to_utf8(backend: Any, asn1_string: Any) -> str: ...
def _parse_asn1_time(backend: Any, asn1_time: Any): ...
def _parse_asn1_generalized_time(backend: Any, generalized_time: Any): ...
def _decode_nonce(backend: Any, nonce: Any): ...

_EXTENSION_HANDLERS_BASE: Any
_EXTENSION_HANDLERS_SCT: Any
_REVOKED_EXTENSION_HANDLERS: Any
_CRL_EXTENSION_HANDLERS: Any
_OCSP_REQ_EXTENSION_HANDLERS: Any
_OCSP_BASICRESP_EXTENSION_HANDLERS: Any
_OCSP_SINGLERESP_EXTENSION_HANDLERS_SCT: Any
