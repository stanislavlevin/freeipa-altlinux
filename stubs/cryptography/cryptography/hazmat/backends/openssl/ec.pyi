from cryptography import utils as utils
from cryptography.exceptions import InvalidSignature as InvalidSignature, UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat.backends.openssl.utils import _calculate_digest_and_algorithm as _calculate_digest_and_algorithm, _check_not_prehashed as _check_not_prehashed, _warn_sign_verify_deprecated as _warn_sign_verify_deprecated
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.hazmat.primitives.asymmetric import AsymmetricSignatureContext as AsymmetricSignatureContext, AsymmetricVerificationContext as AsymmetricVerificationContext, ec as ec
from typing import Any

def _check_signature_algorithm(signature_algorithm: ec.EllipticCurveSignatureAlgorithm) -> Any: ...
def _ec_key_curve_sn(backend: Any, ec_key: Any): ...
def _mark_asn1_named_ec_curve(backend: Any, ec_cdata: Any) -> None: ...
def _sn_to_elliptic_curve(backend: Any, sn: Any): ...
def _ecdsa_sig_sign(backend: Any, private_key: Any, data: Any): ...
def _ecdsa_sig_verify(backend: Any, public_key: Any, signature: Any, data: Any) -> None: ...

class _ECDSASignatureContext(AsymmetricSignatureContext):
    _backend: Any = ...
    _private_key: Any = ...
    _digest: Any = ...
    def __init__(self, backend: Any, private_key: ec.EllipticCurvePrivateKey, algorithm: hashes.HashAlgorithm) -> None: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...

class _ECDSAVerificationContext(AsymmetricVerificationContext):
    _backend: Any = ...
    _public_key: Any = ...
    _signature: Any = ...
    _digest: Any = ...
    def __init__(self, backend: Any, public_key: ec.EllipticCurvePublicKey, signature: bytes, algorithm: hashes.HashAlgorithm) -> None: ...
    def update(self, data: bytes) -> None: ...
    def verify(self) -> None: ...

class _EllipticCurvePrivateKey(ec.EllipticCurvePrivateKey):
    _backend: Any = ...
    _ec_key: Any = ...
    _evp_pkey: Any = ...
    _curve: Any = ...
    def __init__(self, backend: Any, ec_key_cdata: Any, evp_pkey: Any) -> None: ...
    curve: Any = ...
    @property
    def key_size(self) -> int: ...
    def signer(self, signature_algorithm: ec.EllipticCurveSignatureAlgorithm) -> AsymmetricSignatureContext: ...
    def exchange(self, algorithm: ec.ECDH, peer_public_key: ec.EllipticCurvePublicKey) -> bytes: ...
    def public_key(self) -> ec.EllipticCurvePublicKey: ...
    def private_numbers(self) -> ec.EllipticCurvePrivateNumbers: ...
    def private_bytes(self, encoding: serialization.Encoding, format: serialization.PrivateFormat, encryption_algorithm: serialization.KeySerializationEncryption) -> bytes: ...
    def sign(self, data: bytes, signature_algorithm: ec.EllipticCurveSignatureAlgorithm) -> bytes: ...

class _EllipticCurvePublicKey(ec.EllipticCurvePublicKey):
    _backend: Any = ...
    _ec_key: Any = ...
    _evp_pkey: Any = ...
    _curve: Any = ...
    def __init__(self, backend: Any, ec_key_cdata: Any, evp_pkey: Any) -> None: ...
    curve: Any = ...
    @property
    def key_size(self) -> int: ...
    def verifier(self, signature: bytes, signature_algorithm: ec.EllipticCurveSignatureAlgorithm) -> AsymmetricVerificationContext: ...
    def public_numbers(self) -> ec.EllipticCurvePublicNumbers: ...
    def _encode_point(self, format: serialization.PublicFormat) -> bytes: ...
    def public_bytes(self, encoding: serialization.Encoding, format: serialization.PublicFormat) -> bytes: ...
    def verify(self, signature: bytes, data: bytes, signature_algorithm: ec.EllipticCurveSignatureAlgorithm) -> None: ...
