from collections import namedtuple
from cryptography import utils as utils, x509 as x509
from cryptography.exceptions import UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat._der import INTEGER as INTEGER, NULL as NULL, SEQUENCE as SEQUENCE, encode_der as encode_der, encode_der_integer as encode_der_integer
from cryptography.hazmat.backends.interfaces import CMACBackend as CMACBackend, CipherBackend as CipherBackend, DERSerializationBackend as DERSerializationBackend, DHBackend as DHBackend, DSABackend as DSABackend, EllipticCurveBackend as EllipticCurveBackend, HMACBackend as HMACBackend, HashBackend as HashBackend, PBKDF2HMACBackend as PBKDF2HMACBackend, PEMSerializationBackend as PEMSerializationBackend, RSABackend as RSABackend, ScryptBackend as ScryptBackend, X509Backend as X509Backend
from cryptography.hazmat.backends.openssl import aead as aead
from cryptography.hazmat.backends.openssl.ciphers import _CipherContext as _CipherContext
from cryptography.hazmat.backends.openssl.cmac import _CMACContext as _CMACContext
from cryptography.hazmat.backends.openssl.decode_asn1 import _CRL_ENTRY_REASON_ENUM_TO_CODE as _CRL_ENTRY_REASON_ENUM_TO_CODE, _CRL_EXTENSION_HANDLERS as _CRL_EXTENSION_HANDLERS, _EXTENSION_HANDLERS_BASE as _EXTENSION_HANDLERS_BASE, _EXTENSION_HANDLERS_SCT as _EXTENSION_HANDLERS_SCT, _OCSP_BASICRESP_EXTENSION_HANDLERS as _OCSP_BASICRESP_EXTENSION_HANDLERS, _OCSP_REQ_EXTENSION_HANDLERS as _OCSP_REQ_EXTENSION_HANDLERS, _OCSP_SINGLERESP_EXTENSION_HANDLERS_SCT as _OCSP_SINGLERESP_EXTENSION_HANDLERS_SCT, _REVOKED_EXTENSION_HANDLERS as _REVOKED_EXTENSION_HANDLERS, _X509ExtensionParser as _X509ExtensionParser
from cryptography.hazmat.backends.openssl.dh import _DHParameters as _DHParameters, _DHPrivateKey as _DHPrivateKey, _DHPublicKey as _DHPublicKey, _dh_params_dup as _dh_params_dup
from cryptography.hazmat.backends.openssl.dsa import _DSAParameters as _DSAParameters, _DSAPrivateKey as _DSAPrivateKey, _DSAPublicKey as _DSAPublicKey
from cryptography.hazmat.backends.openssl.ec import _EllipticCurvePrivateKey as _EllipticCurvePrivateKey, _EllipticCurvePublicKey as _EllipticCurvePublicKey
from cryptography.hazmat.backends.openssl.ed25519 import _Ed25519PrivateKey as _Ed25519PrivateKey, _Ed25519PublicKey as _Ed25519PublicKey
from cryptography.hazmat.backends.openssl.ed448 import _ED448_KEY_SIZE as _ED448_KEY_SIZE, _Ed448PrivateKey as _Ed448PrivateKey, _Ed448PublicKey as _Ed448PublicKey
from cryptography.hazmat.backends.openssl.encode_asn1 import _CRL_ENTRY_EXTENSION_ENCODE_HANDLERS as _CRL_ENTRY_EXTENSION_ENCODE_HANDLERS, _CRL_EXTENSION_ENCODE_HANDLERS as _CRL_EXTENSION_ENCODE_HANDLERS, _EXTENSION_ENCODE_HANDLERS as _EXTENSION_ENCODE_HANDLERS, _OCSP_BASICRESP_EXTENSION_ENCODE_HANDLERS as _OCSP_BASICRESP_EXTENSION_ENCODE_HANDLERS, _OCSP_REQUEST_EXTENSION_ENCODE_HANDLERS as _OCSP_REQUEST_EXTENSION_ENCODE_HANDLERS, _encode_asn1_int_gc as _encode_asn1_int_gc, _encode_asn1_str_gc as _encode_asn1_str_gc, _encode_name_gc as _encode_name_gc, _txt2obj_gc as _txt2obj_gc
from cryptography.hazmat.backends.openssl.hashes import _HashContext as _HashContext
from cryptography.hazmat.backends.openssl.hmac import _HMACContext as _HMACContext
from cryptography.hazmat.backends.openssl.ocsp import _OCSPRequest as _OCSPRequest, _OCSPResponse as _OCSPResponse
from cryptography.hazmat.backends.openssl.poly1305 import _POLY1305_KEY_SIZE as _POLY1305_KEY_SIZE, _Poly1305Context as _Poly1305Context
from cryptography.hazmat.backends.openssl.rsa import _RSAPrivateKey as _RSAPrivateKey, _RSAPublicKey as _RSAPublicKey
from cryptography.hazmat.backends.openssl.x25519 import _X25519PrivateKey as _X25519PrivateKey, _X25519PublicKey as _X25519PublicKey
from cryptography.hazmat.backends.openssl.x448 import _X448PrivateKey as _X448PrivateKey, _X448PublicKey as _X448PublicKey
from cryptography.hazmat.backends.openssl.x509 import _Certificate as _Certificate, _CertificateRevocationList as _CertificateRevocationList, _CertificateSigningRequest as _CertificateSigningRequest, _RevokedCertificate as _RevokedCertificate
from cryptography.hazmat.bindings.openssl import binding as binding
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.hazmat.primitives.asymmetric import dh as dh, dsa as dsa, ec as ec, ed25519 as ed25519, ed448 as ed448, rsa as rsa
from cryptography.hazmat.primitives.asymmetric.padding import MGF1 as MGF1, OAEP as OAEP, PKCS1v15 as PKCS1v15, PSS as PSS
from cryptography.hazmat.primitives.ciphers.algorithms import AES as AES, ARC4 as ARC4, Blowfish as Blowfish, CAST5 as CAST5, Camellia as Camellia, ChaCha20 as ChaCha20, IDEA as IDEA, SEED as SEED, TripleDES as TripleDES
from cryptography.hazmat.primitives.ciphers.modes import CBC as CBC, CFB as CFB, CFB8 as CFB8, CTR as CTR, ECB as ECB, GCM as GCM, OFB as OFB, XTS as XTS
from cryptography.hazmat.primitives.kdf import scrypt as scrypt
from cryptography.hazmat.primitives.serialization import pkcs7 as pkcs7, ssh as ssh
from cryptography.x509 import ocsp as ocsp
from typing import Any, Optional

_MemoryBIO = namedtuple('_MemoryBIO', ['bio', 'char_ptr'])

class _RC2: ...

class Backend:
    name: str = ...
    _fips_aead: Any = ...
    _fips_ciphers: Any = ...
    _fips_hashes: Any = ...
    _fips_rsa_min_key_size: int = ...
    _fips_rsa_min_public_exponent: int = ...
    _fips_dsa_min_modulus: Any = ...
    _fips_dh_min_key_size: int = ...
    _fips_dh_min_modulus: Any = ...
    _binding: Any = ...
    _ffi: Any = ...
    _lib: Any = ...
    _fips_enabled: Any = ...
    _cipher_registry: Any = ...
    _dh_types: Any = ...
    def __init__(self) -> None: ...
    def openssl_assert(self, ok: Any, errors: Optional[Any] = ...): ...
    def _is_fips_enabled(self): ...
    def activate_builtin_random(self) -> None: ...
    def _get_osurandom_engine(self) -> None: ...
    def activate_osrandom_engine(self) -> None: ...
    def osrandom_engine_implementation(self): ...
    def openssl_version_text(self): ...
    def openssl_version_number(self): ...
    def create_hmac_ctx(self, key: Any, algorithm: Any): ...
    def _evp_md_from_algorithm(self, algorithm: Any): ...
    def _evp_md_non_null_from_algorithm(self, algorithm: Any): ...
    def hash_supported(self, algorithm: Any): ...
    def hmac_supported(self, algorithm: Any): ...
    def create_hash_ctx(self, algorithm: Any): ...
    def cipher_supported(self, cipher: Any, mode: Any): ...
    def register_cipher_adapter(self, cipher_cls: Any, mode_cls: Any, adapter: Any) -> None: ...
    def _register_default_ciphers(self) -> None: ...
    _certificate_extension_parser: Any = ...
    _csr_extension_parser: Any = ...
    _revoked_cert_extension_parser: Any = ...
    _crl_extension_parser: Any = ...
    _ocsp_req_ext_parser: Any = ...
    _ocsp_basicresp_ext_parser: Any = ...
    _ocsp_singleresp_ext_parser: Any = ...
    def _register_x509_ext_parsers(self) -> None: ...
    _extension_encode_handlers: Any = ...
    _crl_extension_encode_handlers: Any = ...
    _crl_entry_extension_encode_handlers: Any = ...
    _ocsp_request_extension_encode_handlers: Any = ...
    _ocsp_basicresp_extension_encode_handlers: Any = ...
    def _register_x509_encoders(self) -> None: ...
    def create_symmetric_encryption_ctx(self, cipher: Any, mode: Any): ...
    def create_symmetric_decryption_ctx(self, cipher: Any, mode: Any): ...
    def pbkdf2_hmac_supported(self, algorithm: Any): ...
    def derive_pbkdf2_hmac(self, algorithm: Any, length: Any, salt: Any, iterations: Any, key_material: Any): ...
    def _consume_errors(self): ...
    def _consume_errors_with_text(self): ...
    def _bn_to_int(self, bn: Any): ...
    def _int_to_bn(self, num: Any, bn: Optional[Any] = ...): ...
    def generate_rsa_private_key(self, public_exponent: Any, key_size: Any): ...
    def generate_rsa_parameters_supported(self, public_exponent: Any, key_size: Any): ...
    def load_rsa_private_numbers(self, numbers: Any): ...
    def load_rsa_public_numbers(self, numbers: Any): ...
    def _create_evp_pkey_gc(self): ...
    def _rsa_cdata_to_evp_pkey(self, rsa_cdata: Any): ...
    def _bytes_to_bio(self, data: Any): ...
    def _create_mem_bio_gc(self): ...
    def _read_mem_bio(self, bio: Any): ...
    def _evp_pkey_to_private_key(self, evp_pkey: Any): ...
    def _evp_pkey_to_public_key(self, evp_pkey: Any): ...
    def _oaep_hash_supported(self, algorithm: Any): ...
    def rsa_padding_supported(self, padding: Any): ...
    def generate_dsa_parameters(self, key_size: Any): ...
    def generate_dsa_private_key(self, parameters: Any): ...
    def generate_dsa_private_key_and_parameters(self, key_size: Any): ...
    def _dsa_cdata_set_values(self, dsa_cdata: Any, p: Any, q: Any, g: Any, pub_key: Any, priv_key: Any) -> None: ...
    def load_dsa_private_numbers(self, numbers: Any): ...
    def load_dsa_public_numbers(self, numbers: Any): ...
    def load_dsa_parameter_numbers(self, numbers: Any): ...
    def _dsa_cdata_to_evp_pkey(self, dsa_cdata: Any): ...
    def dsa_hash_supported(self, algorithm: Any): ...
    def dsa_parameters_supported(self, p: Any, q: Any, g: Any): ...
    def cmac_algorithm_supported(self, algorithm: Any): ...
    def create_cmac_ctx(self, algorithm: Any): ...
    def _x509_check_signature_params(self, private_key: Any, algorithm: Any) -> None: ...
    def create_x509_csr(self, builder: Any, private_key: Any, algorithm: Any): ...
    def create_x509_certificate(self, builder: Any, private_key: Any, algorithm: Any): ...
    def _evp_md_x509_null_if_eddsa(self, private_key: Any, algorithm: Any): ...
    def _set_asn1_time(self, asn1_time: Any, time: Any) -> None: ...
    def _create_asn1_time(self, time: Any): ...
    def create_x509_crl(self, builder: Any, private_key: Any, algorithm: Any): ...
    def _create_x509_extensions(self, extensions: Any, handlers: Any, x509_obj: Any, add_func: Any, gc: Any) -> None: ...
    def _create_raw_x509_extension(self, extension: Any, value: Any): ...
    def _create_x509_extension(self, handlers: Any, extension: Any): ...
    def create_x509_revoked_certificate(self, builder: Any): ...
    def load_pem_private_key(self, data: Any, password: Any): ...
    def load_pem_public_key(self, data: Any): ...
    def load_pem_parameters(self, data: Any): ...
    def load_der_private_key(self, data: Any, password: Any): ...
    def _evp_pkey_from_der_traditional_key(self, bio_data: Any, password: Any): ...
    def load_der_public_key(self, data: Any): ...
    def load_der_parameters(self, data: Any): ...
    def load_pem_x509_certificate(self, data: Any): ...
    def load_der_x509_certificate(self, data: Any): ...
    def load_pem_x509_crl(self, data: Any): ...
    def load_der_x509_crl(self, data: Any): ...
    def load_pem_x509_csr(self, data: Any): ...
    def load_der_x509_csr(self, data: Any): ...
    def _load_key(self, openssl_read_func: Any, convert_func: Any, data: Any, password: Any): ...
    def _handle_key_loading_error(self) -> None: ...
    def elliptic_curve_supported(self, curve: Any): ...
    def elliptic_curve_signature_algorithm_supported(self, signature_algorithm: Any, curve: Any): ...
    def generate_elliptic_curve_private_key(self, curve: Any): ...
    def load_elliptic_curve_private_numbers(self, numbers: Any): ...
    def load_elliptic_curve_public_numbers(self, numbers: Any): ...
    def load_elliptic_curve_public_bytes(self, curve: Any, point_bytes: Any): ...
    def derive_elliptic_curve_private_key(self, private_value: Any, curve: Any): ...
    def _ec_key_new_by_curve(self, curve: Any): ...
    def _ec_key_new_by_curve_nid(self, curve_nid: Any): ...
    def load_der_ocsp_request(self, data: Any): ...
    def load_der_ocsp_response(self, data: Any): ...
    def create_ocsp_request(self, builder: Any): ...
    def _create_ocsp_basic_response(self, builder: Any, private_key: Any, algorithm: Any): ...
    def create_ocsp_response(self, response_status: Any, builder: Any, private_key: Any, algorithm: Any): ...
    def elliptic_curve_exchange_algorithm_supported(self, algorithm: Any, curve: Any): ...
    def _ec_cdata_to_evp_pkey(self, ec_cdata: Any): ...
    def _elliptic_curve_to_nid(self, curve: Any): ...
    def _tmp_bn_ctx(self) -> None: ...
    def _ec_key_determine_group_get_func(self, ctx: Any): ...
    def _ec_key_set_public_key_affine_coordinates(self, ctx: Any, x: Any, y: Any): ...
    def _private_key_bytes(self, encoding: Any, format: Any, encryption_algorithm: Any, key: Any, evp_pkey: Any, cdata: Any): ...
    def _private_key_bytes_via_bio(self, write_bio: Any, evp_pkey: Any, password: Any): ...
    def _bio_func_output(self, write_bio: Any, *args: Any): ...
    def _public_key_bytes(self, encoding: Any, format: Any, key: Any, evp_pkey: Any, cdata: Any): ...
    def _parameter_bytes(self, encoding: Any, format: Any, cdata: Any): ...
    def generate_dh_parameters(self, generator: Any, key_size: Any): ...
    def _dh_cdata_to_evp_pkey(self, dh_cdata: Any): ...
    def generate_dh_private_key(self, parameters: Any): ...
    def generate_dh_private_key_and_parameters(self, generator: Any, key_size: Any): ...
    def load_dh_private_numbers(self, numbers: Any): ...
    def load_dh_public_numbers(self, numbers: Any): ...
    def load_dh_parameter_numbers(self, numbers: Any): ...
    def dh_parameters_supported(self, p: Any, g: Any, q: Optional[Any] = ...): ...
    def dh_x942_serialization_supported(self): ...
    def x509_name_bytes(self, name: Any): ...
    def x25519_load_public_bytes(self, data: Any): ...
    def x25519_load_private_bytes(self, data: Any): ...
    def _evp_pkey_keygen_gc(self, nid: Any): ...
    def x25519_generate_key(self): ...
    def x25519_supported(self): ...
    def x448_load_public_bytes(self, data: Any): ...
    def x448_load_private_bytes(self, data: Any): ...
    def x448_generate_key(self): ...
    def x448_supported(self): ...
    def ed25519_supported(self): ...
    def ed25519_load_public_bytes(self, data: Any): ...
    def ed25519_load_private_bytes(self, data: Any): ...
    def ed25519_generate_key(self): ...
    def ed448_supported(self): ...
    def ed448_load_public_bytes(self, data: Any): ...
    def ed448_load_private_bytes(self, data: Any): ...
    def ed448_generate_key(self): ...
    def derive_scrypt(self, key_material: Any, salt: Any, length: Any, n: Any, r: Any, p: Any): ...
    def aead_cipher_supported(self, cipher: Any): ...
    def _zeroed_bytearray(self, length: Any) -> None: ...
    def _zero_data(self, data: Any, length: Any) -> None: ...
    def _zeroed_null_terminated_buf(self, data: Any) -> None: ...
    def load_key_and_certificates_from_pkcs12(self, data: Any, password: Any): ...
    def serialize_key_and_certificates_to_pkcs12(self, name: Any, key: Any, cert: Any, cas: Any, encryption_algorithm: Any): ...
    def poly1305_supported(self): ...
    def create_poly1305_ctx(self, key: Any): ...
    def load_pem_pkcs7_certificates(self, data: Any): ...
    def load_der_pkcs7_certificates(self, data: Any): ...
    def _load_pkcs7_certificates(self, p7: Any): ...
    def pkcs7_sign(self, builder: Any, encoding: Any, options: Any): ...

class GetCipherByName:
    _fmt: Any = ...
    def __init__(self, fmt: Any) -> None: ...
    def __call__(self, backend: Any, cipher: Any, mode: Any): ...

def _get_xts_cipher(backend: Any, cipher: Any, mode: Any): ...

backend: Any
