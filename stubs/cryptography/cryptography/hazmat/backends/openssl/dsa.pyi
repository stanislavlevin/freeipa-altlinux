import typing
from cryptography import utils as utils
from cryptography.exceptions import InvalidSignature as InvalidSignature
from cryptography.hazmat.backends.openssl.utils import _calculate_digest_and_algorithm as _calculate_digest_and_algorithm, _check_not_prehashed as _check_not_prehashed, _warn_sign_verify_deprecated as _warn_sign_verify_deprecated
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.hazmat.primitives.asymmetric import AsymmetricSignatureContext as AsymmetricSignatureContext, AsymmetricVerificationContext as AsymmetricVerificationContext, dsa as dsa, utils as asym_utils
from typing import Any

def _dsa_sig_sign(backend: Any, private_key: Any, data: Any): ...
def _dsa_sig_verify(backend: Any, public_key: Any, signature: Any, data: Any) -> None: ...

class _DSAVerificationContext(AsymmetricVerificationContext):
    _backend: Any = ...
    _public_key: Any = ...
    _signature: Any = ...
    _algorithm: Any = ...
    _hash_ctx: Any = ...
    def __init__(self, backend: Any, public_key: Any, signature: Any, algorithm: Any) -> None: ...
    def update(self, data: Any) -> None: ...
    def verify(self) -> None: ...

class _DSASignatureContext(AsymmetricSignatureContext):
    _backend: Any = ...
    _private_key: Any = ...
    _algorithm: Any = ...
    _hash_ctx: Any = ...
    def __init__(self, backend: Any, private_key: dsa.DSAPrivateKey, algorithm: hashes.HashAlgorithm) -> None: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...

class _DSAParameters(dsa.DSAParameters):
    _backend: Any = ...
    _dsa_cdata: Any = ...
    def __init__(self, backend: Any, dsa_cdata: Any) -> None: ...
    def parameter_numbers(self) -> dsa.DSAParameterNumbers: ...
    def generate_private_key(self) -> dsa.DSAPrivateKey: ...

class _DSAPrivateKey(dsa.DSAPrivateKey):
    _backend: Any = ...
    _dsa_cdata: Any = ...
    _evp_pkey: Any = ...
    _key_size: Any = ...
    def __init__(self, backend: Any, dsa_cdata: Any, evp_pkey: Any) -> None: ...
    key_size: Any = ...
    def signer(self, signature_algorithm: hashes.HashAlgorithm) -> AsymmetricSignatureContext: ...
    def private_numbers(self) -> dsa.DSAPrivateNumbers: ...
    def public_key(self) -> dsa.DSAPublicKey: ...
    def parameters(self) -> dsa.DSAParameters: ...
    def private_bytes(self, encoding: serialization.Encoding, format: serialization.PrivateFormat, encryption_algorithm: serialization.KeySerializationEncryption) -> bytes: ...
    def sign(self, data: bytes, algorithm: typing.Union[asym_utils.Prehashed, hashes.HashAlgorithm]) -> bytes: ...

class _DSAPublicKey(dsa.DSAPublicKey):
    _backend: Any = ...
    _dsa_cdata: Any = ...
    _evp_pkey: Any = ...
    _key_size: Any = ...
    def __init__(self, backend: Any, dsa_cdata: Any, evp_pkey: Any) -> None: ...
    key_size: Any = ...
    def verifier(self, signature: bytes, signature_algorithm: hashes.HashAlgorithm) -> AsymmetricVerificationContext: ...
    def public_numbers(self) -> dsa.DSAPublicNumbers: ...
    def parameters(self) -> dsa.DSAParameters: ...
    def public_bytes(self, encoding: serialization.Encoding, format: serialization.PublicFormat) -> bytes: ...
    def verify(self, signature: bytes, data: bytes, algorithm: typing.Union[asym_utils.Prehashed, hashes.HashAlgorithm]) -> Any: ...
