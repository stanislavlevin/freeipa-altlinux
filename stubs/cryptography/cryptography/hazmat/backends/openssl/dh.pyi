from cryptography.exceptions import UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat.primitives import serialization as serialization
from cryptography.hazmat.primitives.asymmetric import dh as dh
from typing import Any

def _dh_params_dup(dh_cdata: Any, backend: Any): ...
def _dh_cdata_to_parameters(dh_cdata: Any, backend: Any): ...

class _DHParameters(dh.DHParameters):
    _backend: Any = ...
    _dh_cdata: Any = ...
    def __init__(self, backend: Any, dh_cdata: Any) -> None: ...
    def parameter_numbers(self) -> dh.DHParameterNumbers: ...
    def generate_private_key(self) -> dh.DHPrivateKey: ...
    def parameter_bytes(self, encoding: serialization.Encoding, format: serialization.ParameterFormat) -> bytes: ...

def _get_dh_num_bits(backend: Any, dh_cdata: Any) -> int: ...

class _DHPrivateKey(dh.DHPrivateKey):
    _backend: Any = ...
    _dh_cdata: Any = ...
    _evp_pkey: Any = ...
    _key_size_bytes: Any = ...
    def __init__(self, backend: Any, dh_cdata: Any, evp_pkey: Any) -> None: ...
    @property
    def key_size(self) -> int: ...
    def private_numbers(self) -> dh.DHPrivateNumbers: ...
    def exchange(self, peer_public_key: dh.DHPublicKey) -> bytes: ...
    def public_key(self) -> dh.DHPublicKey: ...
    def parameters(self) -> dh.DHParameters: ...
    def private_bytes(self, encoding: serialization.Encoding, format: serialization.PrivateFormat, encryption_algorithm: serialization.KeySerializationEncryption) -> bytes: ...

class _DHPublicKey(dh.DHPublicKey):
    _backend: Any = ...
    _dh_cdata: Any = ...
    _evp_pkey: Any = ...
    _key_size_bits: Any = ...
    def __init__(self, backend: Any, dh_cdata: Any, evp_pkey: Any) -> None: ...
    @property
    def key_size(self) -> int: ...
    def public_numbers(self) -> dh.DHPublicNumbers: ...
    def parameters(self) -> dh.DHParameters: ...
    def public_bytes(self, encoding: serialization.Encoding, format: serialization.PublicFormat) -> bytes: ...
