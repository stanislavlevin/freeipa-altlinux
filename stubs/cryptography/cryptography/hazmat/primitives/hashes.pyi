import abc
import typing
from cryptography import utils as utils
from cryptography.exceptions import AlreadyFinalized as AlreadyFinalized, UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.backends.interfaces import HashBackend as HashBackend
from typing import Any

class HashAlgorithm(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def name(self) -> str: ...
    @property
    @abc.abstractmethod
    def digest_size(self) -> int: ...
    @property
    @abc.abstractmethod
    def block_size(self) -> typing.Optional[int]: ...

class HashContext(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def algorithm(self) -> HashAlgorithm: ...
    @abc.abstractmethod
    def update(self, data: bytes) -> None: ...
    @abc.abstractmethod
    def finalize(self) -> bytes: ...
    @abc.abstractmethod
    def copy(self) -> HashContext: ...

class ExtendableOutputFunction(metaclass=abc.ABCMeta): ...

class Hash(HashContext):
    _algorithm: Any = ...
    _backend: Any = ...
    _ctx: Any = ...
    def __init__(self, algorithm: HashAlgorithm, backend: Any=..., ctx: Any=...) -> None: ...
    algorithm: Any = ...
    def update(self, data: bytes) -> None: ...
    def copy(self) -> Hash: ...
    def finalize(self) -> bytes: ...

class SHA1(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class SHA512_224(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class SHA512_256(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class SHA224(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class SHA256(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class SHA384(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class SHA512(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class SHA3_224(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: Any = ...

class SHA3_256(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: Any = ...

class SHA3_384(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: Any = ...

class SHA3_512(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: Any = ...

class SHAKE128(HashAlgorithm, ExtendableOutputFunction):
    name: str = ...
    block_size: Any = ...
    _digest_size: Any = ...
    def __init__(self, digest_size: int) -> None: ...
    digest_size: Any = ...

class SHAKE256(HashAlgorithm, ExtendableOutputFunction):
    name: str = ...
    block_size: Any = ...
    _digest_size: Any = ...
    def __init__(self, digest_size: int) -> None: ...
    digest_size: Any = ...

class MD5(HashAlgorithm):
    name: str = ...
    digest_size: int = ...
    block_size: int = ...

class BLAKE2b(HashAlgorithm):
    name: str = ...
    _max_digest_size: int = ...
    _min_digest_size: int = ...
    block_size: int = ...
    _digest_size: Any = ...
    def __init__(self, digest_size: int) -> None: ...
    digest_size: Any = ...

class BLAKE2s(HashAlgorithm):
    name: str = ...
    block_size: int = ...
    _max_digest_size: int = ...
    _min_digest_size: int = ...
    _digest_size: Any = ...
    def __init__(self, digest_size: int) -> None: ...
    digest_size: Any = ...
