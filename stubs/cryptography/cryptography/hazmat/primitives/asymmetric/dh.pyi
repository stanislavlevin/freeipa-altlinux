import abc
import typing
from cryptography import utils as utils
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.primitives import serialization as serialization
from typing import Any, Optional

_MIN_MODULUS_SIZE: int

def generate_parameters(generator: Any, key_size: Any, backend: Any=...) -> DHParameters: ...

class DHParameterNumbers:
    _p: Any = ...
    _g: Any = ...
    _q: Any = ...
    def __init__(self, p: int, g: int, q: typing.Optional[int]=...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def parameters(self, backend: Optional[Any] = ...): ...
    p: Any = ...
    g: Any = ...
    q: Any = ...

class DHPublicNumbers:
    _y: Any = ...
    _parameter_numbers: Any = ...
    def __init__(self, y: Any, parameter_numbers: DHParameterNumbers) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def public_key(self, backend: Any=...) -> DHPublicKey: ...
    y: Any = ...
    parameter_numbers: Any = ...

class DHPrivateNumbers:
    _x: Any = ...
    _public_numbers: Any = ...
    def __init__(self, x: Any, public_numbers: DHPublicNumbers) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def private_key(self, backend: Any=...) -> DHPrivateKey: ...
    public_numbers: Any = ...
    x: Any = ...

class DHParameters(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def generate_private_key(self) -> DHPrivateKey: ...
    @abc.abstractmethod
    def parameter_bytes(self, encoding: serialization.Encoding, format: serialization.ParameterFormat) -> bytes: ...
    @abc.abstractmethod
    def parameter_numbers(self) -> DHParameterNumbers: ...
DHParametersWithSerialization = DHParameters

class DHPublicKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int: ...
    @abc.abstractmethod
    def parameters(self) -> DHParameters: ...
    @abc.abstractmethod
    def public_numbers(self) -> DHPublicNumbers: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: serialization.Encoding, format: serialization.PublicFormat) -> bytes: ...
DHPublicKeyWithSerialization = DHPublicKey

class DHPrivateKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int: ...
    @abc.abstractmethod
    def public_key(self) -> DHPublicKey: ...
    @abc.abstractmethod
    def parameters(self) -> DHParameters: ...
    @abc.abstractmethod
    def exchange(self, peer_public_key: DHPublicKey) -> bytes: ...
    @abc.abstractmethod
    def private_numbers(self) -> DHPrivateNumbers: ...
    @abc.abstractmethod
    def private_bytes(self, encoding: serialization.Encoding, format: serialization.PrivateFormat, encryption_algorithm: serialization.KeySerializationEncryption) -> bytes: ...
DHPrivateKeyWithSerialization = DHPrivateKey
