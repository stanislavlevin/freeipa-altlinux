import typing
from cryptography.hazmat.primitives import hashes as hashes
from cryptography.hazmat.primitives._asymmetric import AsymmetricPadding as AsymmetricPadding
from cryptography.hazmat.primitives.asymmetric import rsa as rsa
from typing import Any

class PKCS1v15(AsymmetricPadding):
    name: str = ...

class PSS(AsymmetricPadding):
    MAX_LENGTH: Any = ...
    name: str = ...
    _mgf: Any = ...
    _salt_length: Any = ...
    def __init__(self, mgf: Any, salt_length: Any) -> None: ...

class OAEP(AsymmetricPadding):
    name: str = ...
    _mgf: Any = ...
    _algorithm: Any = ...
    _label: Any = ...
    def __init__(self, mgf: MGF1, algorithm: hashes.HashAlgorithm, label: typing.Optional[bytes]) -> None: ...

class MGF1:
    MAX_LENGTH: Any = ...
    _algorithm: Any = ...
    def __init__(self, algorithm: hashes.HashAlgorithm) -> None: ...

def calculate_max_pss_salt_length(key: typing.Union[rsa.RSAPrivateKey, rsa.RSAPublicKey], hash_algorithm: hashes.HashAlgorithm) -> int: ...
