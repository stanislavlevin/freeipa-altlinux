import abc
import typing
from cryptography import utils as utils
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.primitives import _serialization as _serialization, hashes as hashes
from cryptography.hazmat.primitives.asymmetric import AsymmetricSignatureContext as AsymmetricSignatureContext, AsymmetricVerificationContext as AsymmetricVerificationContext, utils as asym_utils
from typing import Any

class DSAParameters(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def generate_private_key(self) -> DSAPrivateKey: ...
    @abc.abstractmethod
    def parameter_numbers(self) -> DSAParameterNumbers: ...
DSAParametersWithNumbers = DSAParameters

class DSAPrivateKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int: ...
    @abc.abstractmethod
    def public_key(self) -> DSAPublicKey: ...
    @abc.abstractmethod
    def parameters(self) -> DSAParameters: ...
    @abc.abstractmethod
    def signer(self, signature_algorithm: hashes.HashAlgorithm) -> AsymmetricSignatureContext: ...
    @abc.abstractmethod
    def sign(self, data: bytes, algorithm: typing.Union[asym_utils.Prehashed, hashes.HashAlgorithm]) -> bytes: ...
    @abc.abstractmethod
    def private_numbers(self) -> DSAPrivateNumbers: ...
    @abc.abstractmethod
    def private_bytes(self, encoding: _serialization.Encoding, format: _serialization.PrivateFormat, encryption_algorithm: _serialization.KeySerializationEncryption) -> bytes: ...
DSAPrivateKeyWithSerialization = DSAPrivateKey

class DSAPublicKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int: ...
    @abc.abstractmethod
    def parameters(self) -> DSAParameters: ...
    @abc.abstractmethod
    def verifier(self, signature: bytes, signature_algorithm: hashes.HashAlgorithm) -> AsymmetricVerificationContext: ...
    @abc.abstractmethod
    def public_numbers(self) -> DSAPublicNumbers: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: _serialization.Encoding, format: _serialization.PublicFormat) -> bytes: ...
    @abc.abstractmethod
    def verify(self, signature: bytes, data: bytes, algorithm: typing.Union[asym_utils.Prehashed, hashes.HashAlgorithm]) -> Any: ...
DSAPublicKeyWithSerialization = DSAPublicKey

class DSAParameterNumbers:
    _p: Any = ...
    _q: Any = ...
    _g: Any = ...
    def __init__(self, p: int, q: int, g: int) -> None: ...
    p: Any = ...
    q: Any = ...
    g: Any = ...
    def parameters(self, backend: Any=...) -> DSAParameters: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __repr__(self): ...

class DSAPublicNumbers:
    _y: Any = ...
    _parameter_numbers: Any = ...
    def __init__(self, y: int, parameter_numbers: DSAParameterNumbers) -> None: ...
    y: Any = ...
    parameter_numbers: Any = ...
    def public_key(self, backend: Any=...) -> DSAPublicKey: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __repr__(self): ...

class DSAPrivateNumbers:
    _public_numbers: Any = ...
    _x: Any = ...
    def __init__(self, x: int, public_numbers: DSAPublicNumbers) -> None: ...
    x: Any = ...
    public_numbers: Any = ...
    def private_key(self, backend: Any=...) -> DSAPrivateKey: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

def generate_parameters(key_size: int, backend: Any=...) -> DSAParameters: ...
def generate_private_key(key_size: int, backend: Any=...) -> DSAPrivateKey: ...
def _check_dsa_parameters(parameters: DSAParameterNumbers) -> Any: ...
def _check_dsa_private_numbers(numbers: DSAPrivateNumbers) -> Any: ...
