import abc
from cryptography.exceptions import UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat.primitives import _serialization as _serialization
from typing import Any

class X448PublicKey(metaclass=abc.ABCMeta):
    @classmethod
    def from_public_bytes(cls: Any, data: Any) -> X448PublicKey: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: _serialization.Encoding, format: _serialization.PublicFormat) -> bytes: ...

class X448PrivateKey(metaclass=abc.ABCMeta):
    @classmethod
    def generate(cls: Any) -> X448PrivateKey: ...
    @classmethod
    def from_private_bytes(cls: Any, data: bytes) -> X448PrivateKey: ...
    @abc.abstractmethod
    def public_key(self) -> X448PublicKey: ...
    @abc.abstractmethod
    def private_bytes(self, encoding: _serialization.Encoding, format: _serialization.PrivateFormat, encryption_algorithm: _serialization.KeySerializationEncryption) -> bytes: ...
    @abc.abstractmethod
    def exchange(self, peer_public_key: X448PublicKey) -> bytes: ...
