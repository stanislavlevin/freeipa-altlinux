import typing
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.primitives.ciphers import Cipher as Cipher
from cryptography.hazmat.primitives.ciphers.algorithms import AES as AES
from cryptography.hazmat.primitives.ciphers.modes import ECB as ECB
from cryptography.hazmat.primitives.constant_time import bytes_eq as bytes_eq
from typing import Any

def _wrap_core(wrapping_key: bytes, a: bytes, r: typing.List[bytes], backend: Any) -> bytes: ...
def aes_key_wrap(wrapping_key: bytes, key_to_wrap: bytes, backend: Any=...) -> bytes: ...
def _unwrap_core(wrapping_key: bytes, a: bytes, r: typing.List[bytes], backend: Any) -> typing.Tuple[bytes, typing.List[bytes]]: ...
def aes_key_wrap_with_padding(wrapping_key: bytes, key_to_wrap: bytes, backend: Any=...) -> bytes: ...
def aes_key_unwrap_with_padding(wrapping_key: bytes, wrapped_key: bytes, backend: Any=...) -> bytes: ...
def aes_key_unwrap(wrapping_key: bytes, wrapped_key: bytes, backend: Any=...) -> bytes: ...

class InvalidUnwrap(Exception): ...
