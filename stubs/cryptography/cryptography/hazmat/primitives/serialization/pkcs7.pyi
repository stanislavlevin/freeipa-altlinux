import typing
from cryptography import x509 as x509
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.hazmat.primitives.asymmetric import ec as ec, rsa as rsa
from cryptography.utils import _check_byteslike as _check_byteslike
from enum import Enum
from typing import Any, Optional

def load_pem_pkcs7_certificates(data: bytes) -> typing.List[x509.Certificate]: ...
def load_der_pkcs7_certificates(data: bytes) -> typing.List[x509.Certificate]: ...

_ALLOWED_PKCS7_HASH_TYPES: Any
_ALLOWED_PRIVATE_KEY_TYPES: Any

class PKCS7Options(Enum):
    Text: str = ...
    Binary: str = ...
    DetachedSignature: str = ...
    NoCapabilities: str = ...
    NoAttributes: str = ...
    NoCerts: str = ...

class PKCS7SignatureBuilder:
    _data: Any = ...
    _signers: Any = ...
    _additional_certs: Any = ...
    def __init__(self, data: Optional[Any] = ..., signers: Any = ..., additional_certs: Any = ...) -> None: ...
    def set_data(self, data: bytes) -> PKCS7SignatureBuilder: ...
    def add_signer(self, certificate: x509.Certificate, private_key: _ALLOWED_PRIVATE_KEY_TYPES, hash_algorithm: _ALLOWED_PKCS7_HASH_TYPES) -> PKCS7SignatureBuilder: ...
    def add_certificate(self, certificate: x509.Certificate) -> PKCS7SignatureBuilder: ...
    def sign(self, encoding: serialization.Encoding, options: typing.Iterable[PKCS7Options], backend: Any=...) -> bytes: ...
