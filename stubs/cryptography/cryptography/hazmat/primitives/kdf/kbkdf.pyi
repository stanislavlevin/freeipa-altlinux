import typing
from cryptography import utils as utils
from cryptography.exceptions import AlreadyFinalized as AlreadyFinalized, InvalidKey as InvalidKey, UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.backends.interfaces import HMACBackend as HMACBackend
from cryptography.hazmat.primitives import constant_time as constant_time, hashes as hashes, hmac as hmac
from cryptography.hazmat.primitives.kdf import KeyDerivationFunction as KeyDerivationFunction
from enum import Enum
from typing import Any

class Mode(Enum):
    CounterMode: str = ...

class CounterLocation(Enum):
    BeforeFixed: str = ...
    AfterFixed: str = ...

class KBKDFHMAC(KeyDerivationFunction):
    _algorithm: Any = ...
    _mode: Any = ...
    _length: Any = ...
    _rlen: Any = ...
    _llen: Any = ...
    _location: Any = ...
    _label: Any = ...
    _context: Any = ...
    _backend: Any = ...
    _used: bool = ...
    _fixed_data: Any = ...
    def __init__(self, algorithm: hashes.HashAlgorithm, mode: Mode, length: int, rlen: int, llen: typing.Optional[int], location: CounterLocation, label: typing.Optional[bytes], context: typing.Optional[bytes], fixed: typing.Optional[bytes], backend: Any=...) -> None: ...
    def _valid_byte_length(self, value: int) -> bool: ...
    def derive(self, key_material: bytes) -> bytes: ...
    def _generate_fixed_input(self) -> bytes: ...
    def verify(self, key_material: bytes, expected_key: bytes) -> None: ...
