from cryptography import utils as utils
from cryptography.exceptions import AlreadyFinalized as AlreadyFinalized, InvalidKey as InvalidKey, UnsupportedAlgorithm as UnsupportedAlgorithm, _Reasons as _Reasons
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.backends.interfaces import PBKDF2HMACBackend as PBKDF2HMACBackend
from cryptography.hazmat.primitives import constant_time as constant_time, hashes as hashes
from cryptography.hazmat.primitives.kdf import KeyDerivationFunction as KeyDerivationFunction
from typing import Any

class PBKDF2HMAC(KeyDerivationFunction):
    _used: bool = ...
    _algorithm: Any = ...
    _length: Any = ...
    _salt: Any = ...
    _iterations: Any = ...
    _backend: Any = ...
    def __init__(self, algorithm: hashes.HashAlgorithm, length: int, salt: bytes, iterations: int, backend: Any=...) -> None: ...
    def derive(self, key_material: bytes) -> bytes: ...
    def verify(self, key_material: bytes, expected_key: bytes) -> None: ...
