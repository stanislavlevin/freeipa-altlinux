import typing
from cryptography import exceptions as exceptions, utils as utils
from cryptography.hazmat.backends.openssl import aead as aead
from cryptography.hazmat.backends.openssl.backend import backend as backend
from typing import Any

class ChaCha20Poly1305:
    _MAX_SIZE: Any = ...
    _key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @classmethod
    def generate_key(cls: Any) -> bytes: ...
    def encrypt(self, nonce: bytes, data: bytes, associated_data: typing.Optional[bytes]) -> bytes: ...
    def decrypt(self, nonce: bytes, data: bytes, associated_data: typing.Optional[bytes]) -> bytes: ...
    def _check_params(self, nonce: bytes, data: bytes, associated_data: bytes) -> None: ...

class AESCCM:
    _MAX_SIZE: Any = ...
    _key: Any = ...
    _tag_length: Any = ...
    def __init__(self, key: bytes, tag_length: int=...) -> None: ...
    @classmethod
    def generate_key(cls: Any, bit_length: int) -> bytes: ...
    def encrypt(self, nonce: bytes, data: bytes, associated_data: typing.Optional[bytes]) -> bytes: ...
    def decrypt(self, nonce: bytes, data: bytes, associated_data: typing.Optional[bytes]) -> bytes: ...
    def _validate_lengths(self, nonce: bytes, data_len: int) -> Any: ...
    def _check_params(self, nonce: bytes, data: bytes, associated_data: bytes) -> Any: ...

class AESGCM:
    _MAX_SIZE: Any = ...
    _key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @classmethod
    def generate_key(cls: Any, bit_length: int) -> bytes: ...
    def encrypt(self, nonce: bytes, data: bytes, associated_data: typing.Optional[bytes]) -> bytes: ...
    def decrypt(self, nonce: bytes, data: bytes, associated_data: typing.Optional[bytes]) -> bytes: ...
    def _check_params(self, nonce: bytes, data: bytes, associated_data: bytes) -> None: ...
