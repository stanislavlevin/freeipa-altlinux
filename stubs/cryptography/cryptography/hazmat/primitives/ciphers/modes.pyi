import abc
import typing
from cryptography import utils as utils
from cryptography.hazmat.primitives._cipheralgorithm import CipherAlgorithm as CipherAlgorithm
from typing import Any

class Mode(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def name(self) -> str: ...
    @abc.abstractmethod
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> None: ...

class ModeWithInitializationVector(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def initialization_vector(self) -> bytes: ...

class ModeWithTweak(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def tweak(self) -> bytes: ...

class ModeWithNonce(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def nonce(self) -> bytes: ...

class ModeWithAuthenticationTag(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def tag(self) -> bytes: ...

def _check_aes_key_length(self, algorithm: Any) -> None: ...
def _check_iv_length(self, algorithm: Any) -> None: ...
def _check_nonce_length(nonce: bytes, name: str, algorithm: Any) -> Any: ...
def _check_iv_and_key_length(self, algorithm: Any) -> None: ...

class CBC(Mode, ModeWithInitializationVector):
    name: str = ...
    _initialization_vector: Any = ...
    def __init__(self, initialization_vector: bytes) -> None: ...
    initialization_vector: Any = ...
    validate_for_algorithm: Any = ...

class XTS(Mode, ModeWithTweak):
    name: str = ...
    _tweak: Any = ...
    def __init__(self, tweak: bytes) -> None: ...
    tweak: Any = ...
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> Any: ...

class ECB(Mode):
    name: str = ...
    validate_for_algorithm: Any = ...

class OFB(Mode, ModeWithInitializationVector):
    name: str = ...
    _initialization_vector: Any = ...
    def __init__(self, initialization_vector: bytes) -> None: ...
    initialization_vector: Any = ...
    validate_for_algorithm: Any = ...

class CFB(Mode, ModeWithInitializationVector):
    name: str = ...
    _initialization_vector: Any = ...
    def __init__(self, initialization_vector: bytes) -> None: ...
    initialization_vector: Any = ...
    validate_for_algorithm: Any = ...

class CFB8(Mode, ModeWithInitializationVector):
    name: str = ...
    _initialization_vector: Any = ...
    def __init__(self, initialization_vector: bytes) -> None: ...
    initialization_vector: Any = ...
    validate_for_algorithm: Any = ...

class CTR(Mode, ModeWithNonce):
    name: str = ...
    _nonce: Any = ...
    def __init__(self, nonce: bytes) -> None: ...
    nonce: Any = ...
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> Any: ...

class GCM(Mode, ModeWithInitializationVector, ModeWithAuthenticationTag):
    name: str = ...
    _MAX_ENCRYPTED_BYTES: Any = ...
    _MAX_AAD_BYTES: Any = ...
    _initialization_vector: Any = ...
    _tag: Any = ...
    _min_tag_length: Any = ...
    def __init__(self, initialization_vector: bytes, tag: typing.Optional[bytes]=..., min_tag_length: int=...) -> None: ...
    tag: Any = ...
    initialization_vector: Any = ...
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> Any: ...
