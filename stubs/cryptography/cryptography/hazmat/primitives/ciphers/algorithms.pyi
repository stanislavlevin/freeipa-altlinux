from cryptography import utils as utils
from cryptography.hazmat.primitives.ciphers import BlockCipherAlgorithm as BlockCipherAlgorithm, CipherAlgorithm as CipherAlgorithm
from cryptography.hazmat.primitives.ciphers.modes import ModeWithNonce as ModeWithNonce
from typing import Any

def _verify_key_size(algorithm: CipherAlgorithm, key: bytes) -> Any: ...

class AES(CipherAlgorithm, BlockCipherAlgorithm):
    name: str = ...
    block_size: int = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class Camellia(CipherAlgorithm, BlockCipherAlgorithm):
    name: str = ...
    block_size: int = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class TripleDES(CipherAlgorithm, BlockCipherAlgorithm):
    name: str = ...
    block_size: int = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class Blowfish(CipherAlgorithm, BlockCipherAlgorithm):
    name: str = ...
    block_size: int = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class CAST5(CipherAlgorithm, BlockCipherAlgorithm):
    name: str = ...
    block_size: int = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class ARC4(CipherAlgorithm):
    name: str = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class IDEA(CipherAlgorithm):
    name: str = ...
    block_size: int = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class SEED(CipherAlgorithm, BlockCipherAlgorithm):
    name: str = ...
    block_size: int = ...
    key_sizes: Any = ...
    key: Any = ...
    def __init__(self, key: bytes) -> None: ...
    @property
    def key_size(self) -> int: ...

class ChaCha20(CipherAlgorithm, ModeWithNonce):
    name: str = ...
    key_sizes: Any = ...
    key: Any = ...
    _nonce: Any = ...
    def __init__(self, key: bytes, nonce: bytes) -> None: ...
    nonce: Any = ...
    @property
    def key_size(self) -> int: ...
