import abc
import typing
from cryptography import utils as utils
from cryptography.exceptions import AlreadyFinalized as AlreadyFinalized
from cryptography.hazmat.bindings._padding import lib as lib
from typing import Any

class PaddingContext(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def update(self, data: bytes) -> bytes: ...
    @abc.abstractmethod
    def finalize(self) -> bytes: ...

def _byte_padding_check(block_size: int) -> None: ...
def _byte_padding_update(buffer_: typing.Optional[bytes], data: bytes, block_size: int) -> typing.Tuple[bytes, bytes]: ...
def _byte_padding_pad(buffer_: typing.Optional[bytes], block_size: int, paddingfn: typing.Callable[[int], bytes]) -> bytes: ...
def _byte_unpadding_update(buffer_: typing.Optional[bytes], data: bytes, block_size: int) -> typing.Tuple[bytes, bytes]: ...
def _byte_unpadding_check(buffer_: typing.Optional[bytes], block_size: int, checkfn: typing.Callable[[bytes, int], int]) -> bytes: ...

class PKCS7:
    block_size: Any = ...
    def __init__(self, block_size: int) -> None: ...
    def padder(self): ...
    def unpadder(self): ...

class _PKCS7PaddingContext(PaddingContext):
    _buffer: typing.Optional[bytes]
    block_size: Any = ...
    def __init__(self, block_size: int) -> None: ...
    def update(self, data: bytes) -> bytes: ...
    def _padding(self, size: int) -> bytes: ...
    def finalize(self) -> bytes: ...

class _PKCS7UnpaddingContext(PaddingContext):
    _buffer: typing.Optional[bytes]
    block_size: Any = ...
    def __init__(self, block_size: int) -> None: ...
    def update(self, data: bytes) -> bytes: ...
    def finalize(self) -> bytes: ...

class ANSIX923:
    block_size: Any = ...
    def __init__(self, block_size: int) -> None: ...
    def padder(self) -> PaddingContext: ...
    def unpadder(self) -> PaddingContext: ...

class _ANSIX923PaddingContext(PaddingContext):
    _buffer: typing.Optional[bytes]
    block_size: Any = ...
    def __init__(self, block_size: int) -> None: ...
    def update(self, data: bytes) -> bytes: ...
    def _padding(self, size: int) -> bytes: ...
    def finalize(self) -> bytes: ...

class _ANSIX923UnpaddingContext(PaddingContext):
    _buffer: typing.Optional[bytes]
    block_size: Any = ...
    def __init__(self, block_size: int) -> None: ...
    def update(self, data: bytes) -> bytes: ...
    def finalize(self) -> bytes: ...
