import typing
from cryptography.utils import int_to_bytes as int_to_bytes
from typing import Any

CONSTRUCTED: int
CONTEXT_SPECIFIC: int
INTEGER: int
BIT_STRING: int
OCTET_STRING: int
NULL: int
OBJECT_IDENTIFIER: int
SEQUENCE: Any
SET: Any
PRINTABLE_STRING: int
UTC_TIME: int
GENERALIZED_TIME: int

class DERReader:
    data: Any = ...
    def __init__(self, data: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, tb: Any) -> None: ...
    def is_empty(self): ...
    def check_empty(self) -> None: ...
    def read_byte(self) -> int: ...
    def read_bytes(self, n: Any) -> memoryview: ...
    def read_any_element(self) -> typing.Tuple[int, DERReader]: ...
    def read_element(self, expected_tag: int) -> DERReader: ...
    def read_single_element(self, expected_tag: int) -> DERReader: ...
    def read_optional_element(self, expected_tag: int) -> typing.Optional[DERReader]: ...
    def as_integer(self) -> int: ...

def encode_der_integer(x: int) -> bytes: ...
def encode_der(tag: int, *children: bytes) -> bytes: ...
