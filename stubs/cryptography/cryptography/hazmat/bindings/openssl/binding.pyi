import typing
from collections import namedtuple
from cryptography import utils as utils
from cryptography.exceptions import InternalError as InternalError
from cryptography.hazmat.bindings._openssl import ffi as ffi, lib as lib
from cryptography.hazmat.bindings.openssl._conditional import CONDITIONAL_NAMES as CONDITIONAL_NAMES
from typing import Any, Optional

_OpenSSLErrorWithText = namedtuple('_OpenSSLErrorWithText', ['code', 'lib', 'func', 'reason', 'reason_text'])

class _OpenSSLError:
    _code: Any = ...
    _lib: Any = ...
    _func: Any = ...
    _reason: Any = ...
    def __init__(self, code: Any, lib: Any, func: Any, reason: Any) -> None: ...
    def _lib_reason_match(self, lib: Any, reason: Any): ...
    code: Any = ...
    lib: Any = ...
    func: Any = ...
    reason: Any = ...

def _consume_errors(lib: Any): ...
def _errors_with_text(errors: Any): ...
def _consume_errors_with_text(lib: Any): ...
def _openssl_assert(lib: Any, ok: Any, errors: Optional[Any] = ...) -> None: ...
def build_conditional_library(lib: Any, conditional_names: Any): ...

class Binding:
    lib: typing.ClassVar = ...
    ffi: Any = ...
    _lib_loaded: bool = ...
    _init_lock: Any = ...
    def __init__(self) -> None: ...
    @classmethod
    def _register_osrandom_engine(cls) -> None: ...
    @classmethod
    def _ensure_ffi_initialized(cls) -> None: ...
    @classmethod
    def init_static_locks(cls) -> None: ...

def _verify_package_version(version: Any) -> None: ...
