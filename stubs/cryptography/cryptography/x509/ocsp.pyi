import abc
import datetime
import typing
from cryptography import x509 as x509
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.x509.base import _EARLIEST_UTC_TIME as _EARLIEST_UTC_TIME, _PRIVATE_KEY_TYPES as _PRIVATE_KEY_TYPES, _convert_to_naive_utc_time as _convert_to_naive_utc_time, _reject_duplicate_extension as _reject_duplicate_extension
from enum import Enum
from typing import Any, Optional

_OIDS_TO_HASH: Any

class OCSPResponderEncoding(Enum):
    HASH: str = ...
    NAME: str = ...

class OCSPResponseStatus(Enum):
    SUCCESSFUL: int = ...
    MALFORMED_REQUEST: int = ...
    INTERNAL_ERROR: int = ...
    TRY_LATER: int = ...
    SIG_REQUIRED: int = ...
    UNAUTHORIZED: int = ...

_RESPONSE_STATUS_TO_ENUM: Any
_ALLOWED_HASHES: Any

def _verify_algorithm(algorithm: Any) -> None: ...

class OCSPCertStatus(Enum):
    GOOD: int = ...
    REVOKED: int = ...
    UNKNOWN: int = ...

_CERT_STATUS_TO_ENUM: Any

class _SingleResponse:
    _cert: Any = ...
    _issuer: Any = ...
    _algorithm: Any = ...
    _this_update: Any = ...
    _next_update: Any = ...
    _cert_status: Any = ...
    _revocation_time: Any = ...
    _revocation_reason: Any = ...
    def __init__(self, cert: Any, issuer: Any, algorithm: Any, cert_status: Any, this_update: Any, next_update: Any, revocation_time: Any, revocation_reason: Any) -> None: ...

class OCSPRequest(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def issuer_key_hash(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def issuer_name_hash(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def hash_algorithm(self) -> hashes.HashAlgorithm: ...
    @property
    @abc.abstractmethod
    def serial_number(self) -> int: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: serialization.Encoding) -> bytes: ...
    @property
    @abc.abstractmethod
    def extensions(self) -> x509.Extensions: ...

class OCSPResponse(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def response_status(self) -> OCSPResponseStatus: ...
    @property
    @abc.abstractmethod
    def signature_algorithm_oid(self) -> x509.ObjectIdentifier: ...
    @property
    @abc.abstractmethod
    def signature_hash_algorithm(self) -> typing.Optional[hashes.HashAlgorithm]: ...
    @property
    @abc.abstractmethod
    def signature(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def tbs_response_bytes(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def certificates(self) -> typing.List[x509.Certificate]: ...
    @property
    @abc.abstractmethod
    def responder_key_hash(self) -> typing.Optional[bytes]: ...
    @property
    @abc.abstractmethod
    def responder_name(self) -> typing.Optional[x509.Name]: ...
    @property
    @abc.abstractmethod
    def produced_at(self) -> datetime.datetime: ...
    @property
    @abc.abstractmethod
    def certificate_status(self) -> OCSPCertStatus: ...
    @property
    @abc.abstractmethod
    def revocation_time(self) -> typing.Optional[datetime.datetime]: ...
    @property
    @abc.abstractmethod
    def revocation_reason(self) -> typing.Optional[x509.ReasonFlags]: ...
    @property
    @abc.abstractmethod
    def this_update(self) -> datetime.datetime: ...
    @property
    @abc.abstractmethod
    def next_update(self) -> typing.Optional[datetime.datetime]: ...
    @property
    @abc.abstractmethod
    def issuer_key_hash(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def issuer_name_hash(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def hash_algorithm(self) -> hashes.HashAlgorithm: ...
    @property
    @abc.abstractmethod
    def serial_number(self) -> int: ...
    @property
    @abc.abstractmethod
    def extensions(self) -> x509.Extensions: ...
    @property
    @abc.abstractmethod
    def single_extensions(self) -> x509.Extensions: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: serialization.Encoding) -> bytes: ...

class OCSPRequestBuilder:
    _request: Any = ...
    _extensions: Any = ...
    def __init__(self, request: Optional[Any] = ..., extensions: Any = ...) -> None: ...
    def add_certificate(self, cert: x509.Certificate, issuer: x509.Certificate, algorithm: hashes.HashAlgorithm) -> OCSPRequestBuilder: ...
    def add_extension(self, extval: x509.ExtensionType, critical: bool) -> OCSPRequestBuilder: ...
    def build(self) -> OCSPRequest: ...

class OCSPResponseBuilder:
    _response: Any = ...
    _responder_id: Any = ...
    _certs: Any = ...
    _extensions: Any = ...
    def __init__(self, response: Optional[Any] = ..., responder_id: Optional[Any] = ..., certs: Optional[Any] = ..., extensions: Any = ...) -> None: ...
    def add_response(self, cert: x509.Certificate, issuer: x509.Certificate, algorithm: hashes.HashAlgorithm, cert_status: OCSPCertStatus, this_update: datetime.datetime, next_update: typing.Optional[datetime.datetime], revocation_time: typing.Optional[datetime.datetime], revocation_reason: typing.Optional[x509.ReasonFlags]) -> OCSPResponseBuilder: ...
    def responder_id(self, encoding: OCSPResponderEncoding, responder_cert: x509.Certificate) -> OCSPResponseBuilder: ...
    def certificates(self, certs: typing.Iterable[x509.Certificate]) -> OCSPResponseBuilder: ...
    def add_extension(self, extval: x509.ExtensionType, critical: bool) -> OCSPResponseBuilder: ...
    def sign(self, private_key: _PRIVATE_KEY_TYPES, algorithm: typing.Optional[hashes.HashAlgorithm]) -> OCSPResponse: ...
    @classmethod
    def build_unsuccessful(cls: Any, response_status: OCSPResponseStatus) -> OCSPResponse: ...

def load_der_ocsp_request(data: bytes) -> OCSPRequest: ...
def load_der_ocsp_response(data: bytes) -> OCSPResponse: ...
