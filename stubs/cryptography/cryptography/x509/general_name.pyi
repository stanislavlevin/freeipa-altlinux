import abc
import ipaddress
import typing
from cryptography import utils as utils
from cryptography.x509.name import Name as Name
from cryptography.x509.oid import ObjectIdentifier as ObjectIdentifier
from typing import Any

_GENERAL_NAMES: Any

class UnsupportedGeneralNameType(Exception):
    type: Any = ...
    def __init__(self, msg: Any, type: Any) -> None: ...

class GeneralName(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def value(self) -> Any: ...

class RFC822Name(GeneralName):
    _value: Any = ...
    def __init__(self, value: str) -> None: ...
    value: Any = ...
    @classmethod
    def _init_without_validation(cls, value: Any): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class DNSName(GeneralName):
    _value: Any = ...
    def __init__(self, value: str) -> None: ...
    value: Any = ...
    @classmethod
    def _init_without_validation(cls, value: Any): ...
    def __repr__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class UniformResourceIdentifier(GeneralName):
    _value: Any = ...
    def __init__(self, value: str) -> None: ...
    value: Any = ...
    @classmethod
    def _init_without_validation(cls, value: Any): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class DirectoryName(GeneralName):
    _value: Any = ...
    def __init__(self, value: Name) -> None: ...
    value: Any = ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class RegisteredID(GeneralName):
    _value: Any = ...
    def __init__(self, value: ObjectIdentifier) -> None: ...
    value: Any = ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class IPAddress(GeneralName):
    _value: Any = ...
    def __init__(self, value: typing.Union[ipaddress.IPv4Address, ipaddress.IPv6Address, ipaddress.IPv4Network, ipaddress.IPv6Network]) -> None: ...
    value: Any = ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class OtherName(GeneralName):
    _type_id: Any = ...
    _value: Any = ...
    def __init__(self, type_id: ObjectIdentifier, value: bytes) -> None: ...
    type_id: Any = ...
    value: Any = ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
