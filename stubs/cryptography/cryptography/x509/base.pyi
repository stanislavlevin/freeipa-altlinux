import abc
import datetime
import typing
from cryptography.hazmat._types import _PRIVATE_KEY_TYPES as _PRIVATE_KEY_TYPES, _PUBLIC_KEY_TYPES as _PUBLIC_KEY_TYPES
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.hazmat.primitives import hashes as hashes, serialization as serialization
from cryptography.hazmat.primitives.asymmetric import dsa as dsa, ec as ec, ed25519 as ed25519, ed448 as ed448, rsa as rsa
from cryptography.x509.extensions import Extension as Extension, ExtensionType as ExtensionType, Extensions as Extensions
from cryptography.x509.name import Name as Name
from cryptography.x509.oid import ObjectIdentifier as ObjectIdentifier
from enum import Enum
from typing import Any, Optional

_EARLIEST_UTC_TIME: Any

class AttributeNotFound(Exception):
    oid: Any = ...
    def __init__(self, msg: Any, oid: Any) -> None: ...

def _reject_duplicate_extension(extension: Extension, extensions: typing.List[Extension]) -> Any: ...
def _reject_duplicate_attribute(oid: ObjectIdentifier, attributes: typing.List[typing.Tuple[ObjectIdentifier, bytes]]) -> Any: ...
def _convert_to_naive_utc_time(time: datetime.datetime) -> datetime.datetime: ...

class Version(Enum):
    v1: int = ...
    v3: int = ...

class InvalidVersion(Exception):
    parsed_version: Any = ...
    def __init__(self, msg: Any, parsed_version: Any) -> None: ...

class Certificate(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def fingerprint(self, algorithm: hashes.HashAlgorithm) -> bytes: ...
    @property
    @abc.abstractmethod
    def serial_number(self) -> int: ...
    @property
    @abc.abstractmethod
    def version(self) -> Version: ...
    @abc.abstractmethod
    def public_key(self) -> _PUBLIC_KEY_TYPES: ...
    @property
    @abc.abstractmethod
    def not_valid_before(self) -> datetime.datetime: ...
    @property
    @abc.abstractmethod
    def not_valid_after(self) -> datetime.datetime: ...
    @property
    @abc.abstractmethod
    def issuer(self) -> Name: ...
    @property
    @abc.abstractmethod
    def subject(self) -> Name: ...
    @property
    @abc.abstractmethod
    def signature_hash_algorithm(self) -> typing.Optional[hashes.HashAlgorithm]: ...
    @property
    @abc.abstractmethod
    def signature_algorithm_oid(self) -> ObjectIdentifier: ...
    @property
    @abc.abstractmethod
    def extensions(self) -> Extensions: ...
    @property
    @abc.abstractmethod
    def signature(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def tbs_certificate_bytes(self) -> bytes: ...
    @abc.abstractmethod
    def __eq__(self, other: object) -> bool: ...
    @abc.abstractmethod
    def __ne__(self, other: object) -> bool: ...
    @abc.abstractmethod
    def __hash__(self) -> int: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: serialization.Encoding) -> bytes: ...

class RevokedCertificate(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def serial_number(self) -> int: ...
    @property
    @abc.abstractmethod
    def revocation_date(self) -> datetime.datetime: ...
    @property
    @abc.abstractmethod
    def extensions(self) -> Extensions: ...

class CertificateRevocationList(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def public_bytes(self, encoding: serialization.Encoding) -> bytes: ...
    @abc.abstractmethod
    def fingerprint(self, algorithm: hashes.HashAlgorithm) -> bytes: ...
    @abc.abstractmethod
    def get_revoked_certificate_by_serial_number(self, serial_number: int) -> typing.Optional[RevokedCertificate]: ...
    @property
    @abc.abstractmethod
    def signature_hash_algorithm(self) -> hashes.HashAlgorithm: ...
    @property
    @abc.abstractmethod
    def signature_algorithm_oid(self) -> ObjectIdentifier: ...
    @property
    @abc.abstractmethod
    def issuer(self) -> Name: ...
    @property
    @abc.abstractmethod
    def next_update(self) -> datetime.datetime: ...
    @property
    @abc.abstractmethod
    def last_update(self) -> datetime.datetime: ...
    @property
    @abc.abstractmethod
    def extensions(self) -> Extensions: ...
    @property
    @abc.abstractmethod
    def signature(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def tbs_certlist_bytes(self) -> bytes: ...
    @abc.abstractmethod
    def __eq__(self, other: object) -> bool: ...
    @abc.abstractmethod
    def __ne__(self, other: object) -> bool: ...
    @abc.abstractmethod
    def __len__(self) -> int: ...
    @abc.abstractmethod
    def __getitem__(self, idx: Any) -> Any: ...
    @abc.abstractmethod
    def __iter__(self) -> Any: ...
    @abc.abstractmethod
    def is_signature_valid(self, public_key: _PUBLIC_KEY_TYPES) -> bool: ...

class CertificateSigningRequest(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def __eq__(self, other: object) -> bool: ...
    @abc.abstractmethod
    def __ne__(self, other: object) -> bool: ...
    @abc.abstractmethod
    def __hash__(self) -> int: ...
    @abc.abstractmethod
    def public_key(self) -> _PUBLIC_KEY_TYPES: ...
    @property
    @abc.abstractmethod
    def subject(self) -> Name: ...
    @property
    @abc.abstractmethod
    def signature_hash_algorithm(self) -> hashes.HashAlgorithm: ...
    @property
    @abc.abstractmethod
    def signature_algorithm_oid(self) -> ObjectIdentifier: ...
    @property
    @abc.abstractmethod
    def extensions(self) -> Extensions: ...
    @abc.abstractmethod
    def public_bytes(self, encoding: serialization.Encoding) -> bytes: ...
    @property
    @abc.abstractmethod
    def signature(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def tbs_certrequest_bytes(self) -> bytes: ...
    @property
    @abc.abstractmethod
    def is_signature_valid(self) -> bool: ...
    @abc.abstractmethod
    def get_attribute_for_oid(self, oid: ObjectIdentifier) -> bytes: ...

def load_pem_x509_certificate(data: bytes, backend: Any=...) -> Certificate: ...
def load_der_x509_certificate(data: bytes, backend: Any=...) -> Certificate: ...
def load_pem_x509_csr(data: bytes, backend: Any=...) -> CertificateSigningRequest: ...
def load_der_x509_csr(data: bytes, backend: Any=...) -> CertificateSigningRequest: ...
def load_pem_x509_crl(data: bytes, backend: Any=...) -> CertificateRevocationList: ...
def load_der_x509_crl(data: bytes, backend: Any=...) -> CertificateRevocationList: ...

class CertificateSigningRequestBuilder:
    _subject_name: Any = ...
    _extensions: Any = ...
    _attributes: Any = ...
    def __init__(self, subject_name: Optional[Any] = ..., extensions: Any = ..., attributes: Any = ...) -> None: ...
    def subject_name(self, name: Name) -> Any: ...
    def add_extension(self, extval: ExtensionType, critical: bool) -> Any: ...
    def add_attribute(self, oid: ObjectIdentifier, value: bytes) -> Any: ...
    def sign(self, private_key: _PRIVATE_KEY_TYPES, algorithm: hashes.HashAlgorithm, backend: Any=...) -> CertificateSigningRequest: ...

class CertificateBuilder:
    _version: Any = ...
    _issuer_name: Any = ...
    _subject_name: Any = ...
    _public_key: Any = ...
    _serial_number: Any = ...
    _not_valid_before: Any = ...
    _not_valid_after: Any = ...
    _extensions: Any = ...
    def __init__(self, issuer_name: Optional[Any] = ..., subject_name: Optional[Any] = ..., public_key: Optional[Any] = ..., serial_number: Optional[Any] = ..., not_valid_before: Optional[Any] = ..., not_valid_after: Optional[Any] = ..., extensions: Any = ...) -> None: ...
    def issuer_name(self, name: Name) -> Any: ...
    def subject_name(self, name: Name) -> Any: ...
    def public_key(self, key: _PUBLIC_KEY_TYPES) -> Any: ...
    def serial_number(self, number: int) -> Any: ...
    def not_valid_before(self, time: datetime.datetime) -> Any: ...
    def not_valid_after(self, time: datetime.datetime) -> Any: ...
    def add_extension(self, extval: ExtensionType, critical: bool) -> Any: ...
    def sign(self, private_key: _PRIVATE_KEY_TYPES, algorithm: hashes.HashAlgorithm, backend: Any=...) -> Certificate: ...

class CertificateRevocationListBuilder:
    _issuer_name: Any = ...
    _last_update: Any = ...
    _next_update: Any = ...
    _extensions: Any = ...
    _revoked_certificates: Any = ...
    def __init__(self, issuer_name: Optional[Any] = ..., last_update: Optional[Any] = ..., next_update: Optional[Any] = ..., extensions: Any = ..., revoked_certificates: Any = ...) -> None: ...
    def issuer_name(self, issuer_name: Name) -> Any: ...
    def last_update(self, last_update: datetime.datetime) -> Any: ...
    def next_update(self, next_update: datetime.datetime) -> Any: ...
    def add_extension(self, extval: ExtensionType, critical: bool) -> Any: ...
    def add_revoked_certificate(self, revoked_certificate: RevokedCertificate) -> Any: ...
    def sign(self, private_key: _PRIVATE_KEY_TYPES, algorithm: hashes.HashAlgorithm, backend: Any=...) -> CertificateRevocationList: ...

class RevokedCertificateBuilder:
    _serial_number: Any = ...
    _revocation_date: Any = ...
    _extensions: Any = ...
    def __init__(self, serial_number: Optional[Any] = ..., revocation_date: Optional[Any] = ..., extensions: Any = ...) -> None: ...
    def serial_number(self, number: int) -> Any: ...
    def revocation_date(self, time: datetime.datetime) -> Any: ...
    def add_extension(self, extval: ExtensionType, critical: bool) -> Any: ...
    def build(self, backend: Any=...) -> RevokedCertificate: ...

def random_serial_number() -> int: ...
