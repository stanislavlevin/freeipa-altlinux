import typing
from cryptography import utils as utils
from cryptography.hazmat.backends import _get_backend as _get_backend
from cryptography.x509.oid import NameOID as NameOID, ObjectIdentifier as ObjectIdentifier
from enum import Enum
from typing import Any

class _ASN1Type(Enum):
    UTF8String: int = ...
    NumericString: int = ...
    PrintableString: int = ...
    T61String: int = ...
    IA5String: int = ...
    UTCTime: int = ...
    GeneralizedTime: int = ...
    VisibleString: int = ...
    UniversalString: int = ...
    BMPString: int = ...

_ASN1_TYPE_TO_ENUM: Any
_SENTINEL: Any
_NAMEOID_DEFAULT_TYPE: Any
_NAMEOID_TO_NAME: Any

def _escape_dn_value(val: Any): ...

class NameAttribute:
    _oid: Any = ...
    _value: Any = ...
    _type: Any = ...
    def __init__(self, oid: ObjectIdentifier, value: str, _type: Any=...) -> None: ...
    oid: Any = ...
    value: Any = ...
    def rfc4514_string(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class RelativeDistinguishedName:
    _attributes: Any = ...
    _attribute_set: Any = ...
    def __init__(self, attributes: typing.Iterable[NameAttribute]) -> None: ...
    def get_attributes_for_oid(self, oid: Any) -> typing.List[NameAttribute]: ...
    def rfc4514_string(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[NameAttribute]: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...

class Name:
    _attributes: Any = ...
    def __init__(self, attributes: Any) -> None: ...
    def rfc4514_string(self) -> str: ...
    def get_attributes_for_oid(self, oid: Any) -> typing.List[NameAttribute]: ...
    @property
    def rdns(self) -> typing.Iterable[RelativeDistinguishedName]: ...
    def public_bytes(self, backend: Any=...) -> bytes: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[NameAttribute]: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
