import abc
import datetime
import typing
from cryptography import utils as utils
from cryptography.hazmat._der import BIT_STRING as BIT_STRING, DERReader as DERReader, OBJECT_IDENTIFIER as OBJECT_IDENTIFIER, SEQUENCE as SEQUENCE
from cryptography.hazmat._types import _PUBLIC_KEY_TYPES as _PUBLIC_KEY_TYPES
from cryptography.hazmat.primitives import constant_time as constant_time, serialization as serialization
from cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePublicKey as EllipticCurvePublicKey
from cryptography.hazmat.primitives.asymmetric.rsa import RSAPublicKey as RSAPublicKey
from cryptography.x509.certificate_transparency import SignedCertificateTimestamp as SignedCertificateTimestamp
from cryptography.x509.general_name import GeneralName as GeneralName, IPAddress as IPAddress, OtherName as OtherName
from cryptography.x509.name import RelativeDistinguishedName as RelativeDistinguishedName
from cryptography.x509.oid import CRLEntryExtensionOID as CRLEntryExtensionOID, ExtensionOID as ExtensionOID, OCSPExtensionOID as OCSPExtensionOID, ObjectIdentifier as ObjectIdentifier
from enum import Enum
from typing import Any

def _key_identifier_from_public_key(public_key: _PUBLIC_KEY_TYPES) -> bytes: ...
def _make_sequence_methods(field_name: Any): ...

class DuplicateExtension(Exception):
    oid: Any = ...
    def __init__(self, msg: str, oid: ObjectIdentifier) -> None: ...

class ExtensionNotFound(Exception):
    oid: Any = ...
    def __init__(self, msg: str, oid: ObjectIdentifier) -> None: ...

class ExtensionType(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def oid(self) -> ObjectIdentifier: ...

class Extensions:
    _extensions: Any = ...
    def __init__(self, extensions: typing.List[Extension]) -> None: ...
    def get_extension_for_oid(self, oid: ObjectIdentifier) -> Extension: ...
    def get_extension_for_class(self, extclass: Any) -> Extension: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...

class CRLNumber(ExtensionType):
    oid: Any = ...
    _crl_number: Any = ...
    def __init__(self, crl_number: int) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __repr__(self): ...
    crl_number: Any = ...

class AuthorityKeyIdentifier(ExtensionType):
    oid: Any = ...
    _key_identifier: Any = ...
    _authority_cert_issuer: Any = ...
    _authority_cert_serial_number: Any = ...
    def __init__(self, key_identifier: typing.Optional[bytes], authority_cert_issuer: typing.Optional[typing.Iterable[GeneralName]], authority_cert_serial_number: typing.Optional[int]) -> None: ...
    @classmethod
    def from_issuer_public_key(cls: Any, public_key: _PUBLIC_KEY_TYPES) -> AuthorityKeyIdentifier: ...
    @classmethod
    def from_issuer_subject_key_identifier(cls: Any, ski: SubjectKeyIdentifier) -> AuthorityKeyIdentifier: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    key_identifier: Any = ...
    authority_cert_issuer: Any = ...
    authority_cert_serial_number: Any = ...

class SubjectKeyIdentifier(ExtensionType):
    oid: Any = ...
    _digest: Any = ...
    def __init__(self, digest: bytes) -> None: ...
    @classmethod
    def from_public_key(cls: Any, public_key: _PUBLIC_KEY_TYPES) -> SubjectKeyIdentifier: ...
    digest: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class AuthorityInformationAccess(ExtensionType):
    oid: Any = ...
    _descriptions: Any = ...
    def __init__(self, descriptions: typing.Iterable[AccessDescription]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class SubjectInformationAccess(ExtensionType):
    oid: Any = ...
    _descriptions: Any = ...
    def __init__(self, descriptions: typing.Iterable[AccessDescription]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class AccessDescription:
    _access_method: Any = ...
    _access_location: Any = ...
    def __init__(self, access_method: ObjectIdentifier, access_location: GeneralName) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    access_method: Any = ...
    access_location: Any = ...

class BasicConstraints(ExtensionType):
    oid: Any = ...
    _ca: Any = ...
    _path_length: Any = ...
    def __init__(self, ca: bool, path_length: typing.Optional[int]) -> None: ...
    ca: Any = ...
    path_length: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class DeltaCRLIndicator(ExtensionType):
    oid: Any = ...
    _crl_number: Any = ...
    def __init__(self, crl_number: int) -> None: ...
    crl_number: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __repr__(self): ...

class CRLDistributionPoints(ExtensionType):
    oid: Any = ...
    _distribution_points: Any = ...
    def __init__(self, distribution_points: typing.Iterable[DistributionPoint]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class FreshestCRL(ExtensionType):
    oid: Any = ...
    _distribution_points: Any = ...
    def __init__(self, distribution_points: typing.Iterable[DistributionPoint]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class DistributionPoint:
    _full_name: Any = ...
    _relative_name: Any = ...
    _reasons: Any = ...
    _crl_issuer: Any = ...
    def __init__(self, full_name: typing.Optional[typing.Iterable[GeneralName]], relative_name: typing.Optional[RelativeDistinguishedName], reasons: typing.Optional[typing.FrozenSet[ReasonFlags]], crl_issuer: typing.Optional[typing.Iterable[GeneralName]]) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    full_name: Any = ...
    relative_name: Any = ...
    reasons: Any = ...
    crl_issuer: Any = ...

class ReasonFlags(Enum):
    unspecified: str = ...
    key_compromise: str = ...
    ca_compromise: str = ...
    affiliation_changed: str = ...
    superseded: str = ...
    cessation_of_operation: str = ...
    certificate_hold: str = ...
    privilege_withdrawn: str = ...
    aa_compromise: str = ...
    remove_from_crl: str = ...

class PolicyConstraints(ExtensionType):
    oid: Any = ...
    _require_explicit_policy: Any = ...
    _inhibit_policy_mapping: Any = ...
    def __init__(self, require_explicit_policy: typing.Optional[int], inhibit_policy_mapping: typing.Optional[int]) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    require_explicit_policy: Any = ...
    inhibit_policy_mapping: Any = ...

class CertificatePolicies(ExtensionType):
    oid: Any = ...
    _policies: Any = ...
    def __init__(self, policies: typing.Iterable[PolicyInformation]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class PolicyInformation:
    _policy_identifier: Any = ...
    _policy_qualifiers: Any = ...
    def __init__(self, policy_identifier: ObjectIdentifier, policy_qualifiers: typing.Optional[typing.Iterable[typing.Union[str, UserNotice]]]) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    policy_identifier: Any = ...
    policy_qualifiers: Any = ...

class UserNotice:
    _notice_reference: Any = ...
    _explicit_text: Any = ...
    def __init__(self, notice_reference: typing.Optional[NoticeReference], explicit_text: typing.Optional[str]) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    notice_reference: Any = ...
    explicit_text: Any = ...

class NoticeReference:
    _organization: Any = ...
    _notice_numbers: Any = ...
    def __init__(self, organization: typing.Optional[str], notice_numbers: typing.Iterable[int]) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    organization: Any = ...
    notice_numbers: Any = ...

class ExtendedKeyUsage(ExtensionType):
    oid: Any = ...
    _usages: Any = ...
    def __init__(self, usages: typing.Iterable[ObjectIdentifier]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class OCSPNoCheck(ExtensionType):
    oid: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __repr__(self): ...

class PrecertPoison(ExtensionType):
    oid: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __repr__(self): ...

class TLSFeature(ExtensionType):
    oid: Any = ...
    _features: Any = ...
    def __init__(self, features: typing.Iterable[TLSFeatureType]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class TLSFeatureType(Enum):
    status_request: int = ...
    status_request_v2: int = ...

_TLS_FEATURE_TYPE_TO_ENUM: Any

class InhibitAnyPolicy(ExtensionType):
    oid: Any = ...
    _skip_certs: Any = ...
    def __init__(self, skip_certs: int) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    skip_certs: Any = ...

class KeyUsage(ExtensionType):
    oid: Any = ...
    _digital_signature: Any = ...
    _content_commitment: Any = ...
    _key_encipherment: Any = ...
    _data_encipherment: Any = ...
    _key_agreement: Any = ...
    _key_cert_sign: Any = ...
    _crl_sign: Any = ...
    _encipher_only: Any = ...
    _decipher_only: Any = ...
    def __init__(self, digital_signature: bool, content_commitment: bool, key_encipherment: bool, data_encipherment: bool, key_agreement: bool, key_cert_sign: bool, crl_sign: bool, encipher_only: bool, decipher_only: bool) -> None: ...
    digital_signature: Any = ...
    content_commitment: Any = ...
    key_encipherment: Any = ...
    data_encipherment: Any = ...
    key_agreement: Any = ...
    key_cert_sign: Any = ...
    crl_sign: Any = ...
    @property
    def encipher_only(self): ...
    @property
    def decipher_only(self): ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class NameConstraints(ExtensionType):
    oid: Any = ...
    _permitted_subtrees: Any = ...
    _excluded_subtrees: Any = ...
    def __init__(self, permitted_subtrees: typing.Optional[typing.Iterable[GeneralName]], excluded_subtrees: typing.Optional[typing.Iterable[GeneralName]]) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def _validate_ip_name(self, tree: Any) -> None: ...
    def __repr__(self): ...
    def __hash__(self) -> Any: ...
    permitted_subtrees: Any = ...
    excluded_subtrees: Any = ...

class Extension:
    _oid: Any = ...
    _critical: Any = ...
    _value: Any = ...
    def __init__(self, oid: ObjectIdentifier, critical: bool, value: ExtensionType) -> None: ...
    oid: Any = ...
    critical: Any = ...
    value: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class GeneralNames:
    _general_names: Any = ...
    def __init__(self, general_names: typing.Iterable[GeneralName]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def get_values_for_type(self, type: typing.Type[GeneralName]) -> Any: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class SubjectAlternativeName(ExtensionType):
    oid: Any = ...
    _general_names: Any = ...
    def __init__(self, general_names: typing.Iterable[GeneralName]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def get_values_for_type(self, type: Any): ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class IssuerAlternativeName(ExtensionType):
    oid: Any = ...
    _general_names: Any = ...
    def __init__(self, general_names: typing.Iterable[GeneralName]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def get_values_for_type(self, type: Any): ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class CertificateIssuer(ExtensionType):
    oid: Any = ...
    _general_names: Any = ...
    def __init__(self, general_names: typing.Iterable[GeneralName]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def get_values_for_type(self, type: Any): ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class CRLReason(ExtensionType):
    oid: Any = ...
    _reason: Any = ...
    def __init__(self, reason: ReasonFlags) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    reason: Any = ...

class InvalidityDate(ExtensionType):
    oid: Any = ...
    _invalidity_date: Any = ...
    def __init__(self, invalidity_date: datetime.datetime) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    invalidity_date: Any = ...

class PrecertificateSignedCertificateTimestamps(ExtensionType):
    oid: Any = ...
    _signed_certificate_timestamps: Any = ...
    def __init__(self, signed_certificate_timestamps: typing.Iterable[SignedCertificateTimestamp]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class SignedCertificateTimestamps(ExtensionType):
    oid: Any = ...
    _signed_certificate_timestamps: Any = ...
    def __init__(self, signed_certificate_timestamps: typing.Iterable[SignedCertificateTimestamp]) -> None: ...
    __len__: Any = ...
    __iter__: Any = ...
    __getitem__: Any = ...
    def __repr__(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class OCSPNonce(ExtensionType):
    oid: Any = ...
    _nonce: Any = ...
    def __init__(self, nonce: bytes) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __repr__(self): ...
    nonce: Any = ...

class IssuingDistributionPoint(ExtensionType):
    oid: Any = ...
    _only_contains_user_certs: Any = ...
    _only_contains_ca_certs: Any = ...
    _indirect_crl: Any = ...
    _only_contains_attribute_certs: Any = ...
    _only_some_reasons: Any = ...
    _full_name: Any = ...
    _relative_name: Any = ...
    def __init__(self, full_name: Any, relative_name: Any, only_contains_user_certs: Any, only_contains_ca_certs: Any, only_some_reasons: Any, indirect_crl: Any, only_contains_attribute_certs: Any) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    full_name: Any = ...
    relative_name: Any = ...
    only_contains_user_certs: Any = ...
    only_contains_ca_certs: Any = ...
    only_some_reasons: Any = ...
    indirect_crl: Any = ...
    only_contains_attribute_certs: Any = ...

class UnrecognizedExtension(ExtensionType):
    _oid: Any = ...
    _value: Any = ...
    def __init__(self, oid: ObjectIdentifier, value: bytes) -> None: ...
    oid: Any = ...
    value: Any = ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
