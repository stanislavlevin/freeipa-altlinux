import pprint
import reprlib
from typing import Any, Dict, IO, Optional

def _try_repr_or_str(obj: object) -> str: ...
def _format_repr_exception(exc: BaseException, obj: object) -> str: ...
def _ellipsize(s: str, maxsize: int) -> str: ...

class SafeRepr(reprlib.Repr):
    maxstring: Any = ...
    maxsize: Any = ...
    def __init__(self, maxsize: int) -> None: ...
    def repr(self, x: object) -> str: ...
    def repr_instance(self, x: object, level: int) -> str: ...

def safeformat(obj: object) -> str: ...
def saferepr(obj: object, maxsize: int=...) -> str: ...

class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter):
    def _format(self, object: object, stream: IO[str], indent: int, allowance: int, context: Dict[int, Any], level: int) -> None: ...

def _pformat_dispatch(object: object, indent: int=..., width: int=..., depth: Optional[int]=..., *, compact: bool=...) -> str: ...
