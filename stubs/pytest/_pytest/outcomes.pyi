import abc
from typing import Any, Callable, NoReturn, Optional, Type, TypeVar
from typing_extensions import Protocol as Protocol

TYPE_CHECKING: bool

class OutcomeException(BaseException):
    msg: Any = ...
    pytrace: Any = ...
    def __init__(self, msg: Optional[str]=..., pytrace: bool=...) -> None: ...
    def __repr__(self) -> str: ...
    __str__: Any = ...

TEST_OUTCOME: Any

class Skipped(OutcomeException):
    __module__: str = ...
    allow_module_level: Any = ...
    def __init__(self, msg: Optional[str]=..., pytrace: bool=..., allow_module_level: bool=...) -> None: ...

class Failed(OutcomeException):
    __module__: str = ...

class Exit(Exception):
    msg: Any = ...
    returncode: Any = ...
    def __init__(self, msg: str=..., returncode: Optional[int]=...) -> None: ...
_F = TypeVar('_F', bound=Callable[..., object])
_ET = TypeVar('_ET', bound=Type[BaseException])

class _WithException(metaclass=abc.ABCMeta):
    Exception: _ET
    __call__: _F

def _with_exception(exception_type: _ET) -> Callable[[_F], _WithException[_F, _ET]]: ...
def exit(msg: str, returncode: Optional[int]=...) -> NoReturn: ...
def skip(msg: str=..., *, allow_module_level: bool=...) -> NoReturn: ...
def fail(msg: str=..., pytrace: bool=...) -> NoReturn: ...

class XFailed(Failed): ...

def xfail(reason: str=...) -> NoReturn: ...
def importorskip(modname: str, minversion: Optional[str]=..., reason: Optional[str]=...) -> Any: ...
