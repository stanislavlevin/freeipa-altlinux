import argparse
import warnings
from _pytest import nodes as nodes, timing as timing
from _pytest._code import ExceptionInfo as ExceptionInfo
from _pytest._code.code import ExceptionRepr as ExceptionRepr
from _pytest._io.wcwidth import wcswidth as wcswidth
from _pytest.compat import final as final
from _pytest.config import Config as Config, ExitCode as ExitCode, _PluggyPlugin as _PluggyPlugin, hookimpl as hookimpl
from _pytest.config.argparsing import Parser as Parser
from _pytest.main import Session as Session
from _pytest.nodes import Item as Item, Node as Node
from _pytest.pathlib import absolutepath as absolutepath, bestrelpath as bestrelpath
from _pytest.reports import BaseReport as BaseReport, CollectReport as CollectReport, TestReport as TestReport
from pathlib import Path
from typing import Any, Dict, Generator, List, Optional, Sequence, TextIO, Tuple, Union
from typing_extensions import Literal as Literal

REPORT_COLLECTING_RESOLUTION: float
KNOWN_TYPES: Any
_REPORTCHARS_DEFAULT: str

class MoreQuietAction(argparse.Action):
    def __init__(self, option_strings: Sequence[str], dest: str, default: object=..., required: bool=..., help: Optional[str]=...) -> None: ...
    def __call__(self, parser: argparse.ArgumentParser, namespace: argparse.Namespace, values: Union[str, Sequence[object], None], option_string: Optional[str]=...) -> None: ...

def pytest_addoption(parser: Parser) -> None: ...
def pytest_configure(config: Config) -> None: ...
def getreportopt(config: Config) -> str: ...
def pytest_report_teststatus(report: BaseReport) -> Tuple[str, str, str]: ...

class WarningReport:
    message: Any = ...
    nodeid: Any = ...
    fslocation: Any = ...
    count_towards_summary: bool = ...
    def get_location(self, config: Config) -> Optional[str]: ...
    def __init__(self, message: Any, nodeid: Any, fslocation: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class TerminalReporter:
    config: Any = ...
    _numcollected: int = ...
    _session: Any = ...
    _showfspath: Any = ...
    stats: Any = ...
    _main_color: Any = ...
    _known_types: Any = ...
    startdir: Any = ...
    startpath: Any = ...
    _tw: Any = ...
    _screen_width: Any = ...
    currentfspath: Any = ...
    reportchars: Any = ...
    hasmarkup: Any = ...
    isatty: Any = ...
    _progress_nodeids_reported: Any = ...
    _show_progress_info: Any = ...
    _collect_report_last_write: Any = ...
    _already_displayed_warnings: Any = ...
    _keyboardinterrupt_memo: Any = ...
    def __init__(self, config: Config, file: Optional[TextIO]=...) -> None: ...
    def _determine_show_progress_info(self) -> Literal[progress, count, False]: ...
    @property
    def verbosity(self) -> int: ...
    @property
    def showheader(self) -> bool: ...
    @property
    def no_header(self) -> bool: ...
    @property
    def no_summary(self) -> bool: ...
    @property
    def showfspath(self) -> bool: ...
    @showfspath.setter
    def showfspath(self, value: Optional[bool]) -> None: ...
    @property
    def showlongtestinfo(self) -> bool: ...
    def hasopt(self, char: str) -> bool: ...
    def write_fspath_result(self, nodeid: str, res: Any, **markup: bool) -> None: ...
    def write_ensure_prefix(self, prefix: str, extra: str=..., **kwargs: Any) -> None: ...
    def ensure_newline(self) -> None: ...
    def write(self, content: str, *, flush: bool=..., **markup: bool) -> None: ...
    def flush(self) -> None: ...
    def write_line(self, line: Union[str, bytes], **markup: bool) -> None: ...
    def rewrite(self, line: str, **markup: bool) -> None: ...
    def write_sep(self, sep: str, title: Optional[str]=..., fullwidth: Optional[int]=..., **markup: bool) -> None: ...
    def section(self, title: str, sep: str=..., **kw: bool) -> None: ...
    def line(self, msg: str, **kw: bool) -> None: ...
    def _add_stats(self, category: str, items: Sequence[Any]) -> None: ...
    def pytest_internalerror(self, excrepr: ExceptionRepr) -> bool: ...
    def pytest_warning_recorded(self, warning_message: warnings.WarningMessage, nodeid: str) -> None: ...
    def pytest_plugin_registered(self, plugin: _PluggyPlugin) -> None: ...
    def pytest_deselected(self, items: Sequence[Item]) -> None: ...
    def pytest_runtest_logstart(self, nodeid: str, location: Tuple[str, Optional[int], str]) -> None: ...
    _tests_ran: bool = ...
    def pytest_runtest_logreport(self, report: TestReport) -> None: ...
    @property
    def _is_last_item(self) -> bool: ...
    def pytest_runtest_logfinish(self, nodeid: str) -> None: ...
    def _get_progress_information_message(self) -> str: ...
    def _write_progress_information_filling_space(self) -> None: ...
    @property
    def _width_of_current_line(self) -> int: ...
    def pytest_collection(self) -> None: ...
    def pytest_collectreport(self, report: CollectReport) -> None: ...
    def report_collect(self, final: bool=...) -> None: ...
    _sessionstarttime: Any = ...
    def pytest_sessionstart(self, session: Session) -> None: ...
    def _write_report_lines_from_hooks(self, lines: Sequence[Union[str, Sequence[str]]]) -> None: ...
    def pytest_report_header(self, config: Config) -> List[str]: ...
    def pytest_collection_finish(self, session: Session) -> None: ...
    def _printcollecteditems(self, items: Sequence[Item]) -> None: ...
    def pytest_sessionfinish(self, session: Session, exitstatus: Union[int, ExitCode]) -> Any: ...
    def pytest_terminal_summary(self) -> Generator[None, None, None]: ...
    def pytest_keyboard_interrupt(self, excinfo: ExceptionInfo[BaseException]) -> None: ...
    def pytest_unconfigure(self) -> None: ...
    def _report_keyboardinterrupt(self) -> None: ...
    def _locationline(self, nodeid: Any, fspath: Any, lineno: Any, domain: Any): ...
    def _getfailureheadline(self, rep: Any): ...
    def _getcrashline(self, rep: Any): ...
    def getreports(self, name: str) -> Any: ...
    def summary_warnings(self) -> None: ...
    def summary_passes(self) -> None: ...
    def _get_teardown_reports(self, nodeid: str) -> List[TestReport]: ...
    def _handle_teardown_sections(self, nodeid: str) -> None: ...
    def print_teardown_sections(self, rep: TestReport) -> None: ...
    def summary_failures(self) -> None: ...
    def summary_errors(self) -> None: ...
    def _outrep_summary(self, rep: BaseReport) -> None: ...
    def summary_stats(self) -> None: ...
    def short_test_summary(self) -> None: ...
    def _get_main_color(self) -> Tuple[str, List[str]]: ...
    def _determine_main_color(self, unknown_type_seen: bool) -> str: ...
    def _set_main_color(self) -> None: ...
    def build_summary_stats_line(self) -> Tuple[List[Tuple[str, Dict[str, bool]]], str]: ...
    def _get_reports_to_display(self, key: str) -> List[Any]: ...
    def _build_normal_summary_stats_line(self) -> Tuple[List[Tuple[str, Dict[str, bool]]], str]: ...
    def _build_collect_only_summary_stats_line(self) -> Tuple[List[Tuple[str, Dict[str, bool]]], str]: ...

def _get_pos(config: Config, rep: BaseReport) -> Any: ...
def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]: ...
def _get_line_with_reprcrash_message(config: Config, rep: BaseReport, termwidth: int) -> str: ...
def _folded_skips(startpath: Path, skipped: Sequence[CollectReport]) -> List[Tuple[int, str, Optional[int], str]]: ...

_color_for_type: Any
_color_for_type_default: str

def pluralize(count: int, noun: str) -> Tuple[int, str]: ...
def _plugin_nameversions(plugininfo: Any) -> List[str]: ...
def format_session_duration(seconds: float) -> str: ...
def _get_raw_skip_reason(report: TestReport) -> str: ...
