import _pytest._code
import types
import unittest
from _pytest.compat import getimfunc as getimfunc, is_async_function as is_async_function
from _pytest.config import hookimpl as hookimpl
from _pytest.fixtures import FixtureRequest as FixtureRequest, _Scope as _Scope
from _pytest.nodes import Collector as Collector, Item as Item
from _pytest.outcomes import exit as exit, fail as fail, skip as skip, xfail as xfail
from _pytest.python import Class as Class, Function as Function, PyCollector as PyCollector
from _pytest.runner import CallInfo as CallInfo
from _pytest.skipping import skipped_by_mark_key as skipped_by_mark_key, unexpectedsuccess_key as unexpectedsuccess_key
from typing import Any, Generator, Iterable, List, Optional, Tuple, Type, Union

_SysExcInfoType = Union[Tuple[Type[BaseException], BaseException, types.TracebackType], Tuple[None, None, None]]

def pytest_pycollect_makeitem(collector: PyCollector, name: str, obj: object) -> Optional[UnitTestCase]: ...

class UnitTestCase(Class):
    nofuncargs: bool = ...
    def collect(self) -> Iterable[Union[Item, Collector]]: ...
    def _inject_setup_teardown_fixtures(self, cls: type) -> None: ...

def _make_xunit_fixture(obj: type, setup_name: str, teardown_name: str, cleanup_name: Optional[str], scope: _Scope, pass_self: bool) -> Any: ...

class TestCaseFunction(Function):
    nofuncargs: bool = ...
    _excinfo: Optional[List[_pytest._code.ExceptionInfo[BaseException]]] = ...
    _testcase: Optional[unittest.TestCase] = ...
    _explicit_tearDown: Any = ...
    _obj: Any = ...
    def setup(self) -> None: ...
    def teardown(self) -> None: ...
    def startTest(self, testcase: unittest.TestCase) -> None: ...
    def _addexcinfo(self, rawexcinfo: _SysExcInfoType) -> None: ...
    def addError(self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType) -> None: ...
    def addFailure(self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType) -> None: ...
    def addSkip(self, testcase: unittest.TestCase, reason: str) -> None: ...
    def addExpectedFailure(self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType, reason: str=...) -> None: ...
    def addUnexpectedSuccess(self, testcase: unittest.TestCase, reason: str=...) -> None: ...
    def addSuccess(self, testcase: unittest.TestCase) -> None: ...
    def stopTest(self, testcase: unittest.TestCase) -> None: ...
    def _expecting_failure(self, test_method: Any) -> bool: ...
    def runtest(self) -> None: ...
    def _prunetraceback(self, excinfo: _pytest._code.ExceptionInfo[BaseException]) -> None: ...

def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> None: ...
def pytest_runtest_protocol(item: Item) -> Generator[None, None, None]: ...
def check_testcase_implements_trial_reporter(done: List[int]=...) -> None: ...
def _is_skipped(obj: Any) -> bool: ...
